{
    "pipes": [],
    "interfaces": [
        {
            "name": "AgentDetailsDto",
            "id": "interface-AgentDetailsDto-87802373e009a9efbf94f7ed90c1fc3bad407c4e6cda2a07b9d766a3568baad016b64f717300f0400eb8805546a173b7ef252f316bab5d2fae3483168f8ac773",
            "file": "src/app/models/agent-details-dto.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Status } from './status.enum';\r\n\r\nexport type HardwareStatus = 'Running' | 'Failed' | 'Anomaly_detected';\r\n\r\nexport interface CommandHistoryItem {\r\n  initiatedBy: string;\r\n  timestamp: Date;\r\n  description: string;\r\n}\r\n\r\nexport interface AgentDetailsDto {\r\n  id: string;\r\n  name: string;\r\n  batteryLevel: number;\r\n  status: Status;\r\n\r\n  general: {\r\n    currentCommand: string;\r\n    model: 'ANYmal' | 'ANYmal X';\r\n    firmwareVersion: string;\r\n    firmwareLastUpdated: Date;\r\n    manualModeOn: boolean;\r\n    location: { x: number; y: number; z: number };\r\n    trekkerVersion: string;\r\n    trekkerLastUpdated: Date;\r\n  };\r\n\r\n  hardware: {\r\n    temperatureSensor: HardwareStatus;\r\n    pressureSensor: HardwareStatus;\r\n    leg1Status: HardwareStatus;\r\n    leg2Status: HardwareStatus;\r\n    leg3Status: HardwareStatus;\r\n    leg4Status: HardwareStatus;\r\n    gps: HardwareStatus;\r\n    engine: HardwareStatus;\r\n    battery: HardwareStatus;\r\n    lidarScanner: HardwareStatus;\r\n    wifi: HardwareStatus;\r\n    lte: HardwareStatus;\r\n    cpu1: HardwareStatus;\r\n    cpu2: HardwareStatus;\r\n    depthCameras: HardwareStatus[]; // Array for 6 cameras\r\n    opticalCameras: HardwareStatus[]; // Array for 2 cameras\r\n    thermalCamera: HardwareStatus;\r\n    panTiltUnit: HardwareStatus;\r\n    spotlight: HardwareStatus;\r\n    ultrasonicMicrophone: HardwareStatus;\r\n  };\r\n\r\n  recentImages: string[]; // URLs or IDs of recent images\r\n  commandHistory: CommandHistoryItem[]; // List of executed commands\r\n  statusHistory: { timestamp: Date; status: string }[]; // History of status changes\r\n}\r\n",
            "properties": [
                {
                    "name": "batteryLevel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "commandHistory",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CommandHistoryItem[]",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "general",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "hardware",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "recentImages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Status",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "statusHistory",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type[]",
                    "optional": false,
                    "description": "",
                    "line": 53
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "AgentDto",
            "id": "interface-AgentDto-2a4980b3d7487496cc957da73d0f5f6f51195740ee3e89b2313bd1dcbed22a73414af1eff591b7b9e4e72c2f57d3cddd0080ce4a187e8c34fd8c2c2e3e01a9a1",
            "file": "src/app/models/agent-dto.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Status } from \"./status.enum\";\r\n\r\nexport interface AgentDto {\r\n  id: string;\r\n  name: string;\r\n  batteryLevel: number;\r\n  status: Status;\r\n}\r\n",
            "properties": [
                {
                    "name": "batteryLevel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Status",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "AgentState",
            "id": "interface-AgentState-ce7fa88894a45c472e20faa852c2acc7acb2233c773661cd91e8cb6fcab58ac9ea49e240aa117e7ed338590cf0e6104c5ac2aa433ef5e06ac310d6f0d0b1a83b",
            "file": "src/app/agent-details/agent-details.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, OnDestroy, OnInit, ViewChild } from '@angular/core';\r\nimport { ActivatedRoute, RouterModule } from '@angular/router';\r\nimport { AgentService } from '../services/agent.service';\r\nimport { AgentDetailsDto } from '../models/agent-details-dto.model';\r\nimport { AgentBatteryLevelComponent } from '../agent-battery-level/agent-battery-level.component';\r\nimport { AgentStatusComponent } from '../agent-status/agent-status.component';\r\nimport { Subscription } from 'rxjs';\r\nimport { CommonModule, DatePipe, NgFor, NgIf } from '@angular/common';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatTabChangeEvent, MatTabsModule } from '@angular/material/tabs';\r\nimport { MatTableDataSource, MatTableModule } from '@angular/material/table';\r\nimport { MatListModule } from '@angular/material/list';\r\nimport { AgentLiveFeedComponent } from \"../agent-live-feed/agent-live-feed.component\";\r\nimport { Status } from '../models/status.enum';\r\nimport { Vector3 } from '@babylonjs/core';\r\n\r\nexport interface AgentState {\r\n  name: string;\r\n  position: Vector3;\r\n  batteryLevel: number;\r\n  status: Status;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-agent-details',\r\n  standalone: true,\r\n  imports: [\r\n    NgIf,\r\n    NgFor,\r\n    DatePipe,\r\n    MatCardModule,\r\n    MatTabsModule,\r\n    MatButtonModule,\r\n    MatTableModule,\r\n    MatListModule,\r\n    RouterModule,\r\n    CommonModule,\r\n    AgentBatteryLevelComponent,\r\n    AgentStatusComponent,\r\n    AgentLiveFeedComponent\r\n],\r\n  templateUrl: './agent-details.component.html',\r\n  styleUrls: ['./agent-details.component.scss'],\r\n})\r\nexport class AgentDetailsComponent implements OnInit, OnDestroy {\r\n  @ViewChild('liveFeed') liveFeed!: AgentLiveFeedComponent;\r\n  \r\n  agentState: AgentState = {\r\n    name: '',\r\n    position: new Vector3(0, 0.65, 0),\r\n    batteryLevel: 100,\r\n    status: Status.Active\r\n  };\r\n\r\n  private previousState: AgentState | null = null;\r\n\r\n  agent?: AgentDetailsDto;\r\n  hardwareItems: { name: string; status: string }[] = [];\r\n  \r\n  statusHistoryDataSource!: MatTableDataSource<{ timestamp: Date; status: string }>;\r\n  commandHistoryDataSource!: MatTableDataSource<{ initiatedBy: string, timestamp: Date, description: string }>;\r\n  \r\n  private subscription!: Subscription;\r\n\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private agentService: AgentService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    const agentId = this.route.snapshot.paramMap.get('id');\r\n\r\n    // Start streaming real-time updates for the agent\r\n    this.agentService.startAgentStreaming(agentId!);\r\n\r\n    // Subscribe to real-time updates\r\n    this.subscription = this.agentService.agent$.subscribe((agent) => {\r\n      if (agent && agent.id === agentId) {\r\n        this.agent = agent;\r\n        this.hardwareItems = this.createHardwareItems(this.agent.hardware);\r\n        this.statusHistoryDataSource = new MatTableDataSource(this.agent.statusHistory);\r\n        this.commandHistoryDataSource = new MatTableDataSource(this.agent.commandHistory);\r\n\r\n        const newState: AgentState = {\r\n          name: this.agent.name,\r\n          position: new Vector3(\r\n            agent.general.location.x, \r\n            agent.general.location.y, \r\n            agent.general.location.z\r\n          ),\r\n          batteryLevel: agent.batteryLevel,\r\n          status: agent.status\r\n        };\r\n\r\n        if (!this.previousState || !this.isSameState(this.previousState, newState)) {\r\n          this.agentState = newState;\r\n          this.previousState = newState;\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    if (this.subscription) {\r\n      this.subscription.unsubscribe();\r\n    }\r\n\r\n    // Stop the connection when the component is destroyed\r\n    this.agentService.stopConnection();\r\n  }\r\n\r\n  createHardwareItems(hardware: any): { name: string; status: string }[] {\r\n    return [\r\n      { name: 'Temperature Sensor', status: hardware.temperatureSensor },\r\n      { name: 'Pressure Sensor', status: hardware.pressureSensor },\r\n      { name: 'Leg 1 Status', status: hardware.leg1Status },\r\n      { name: 'Leg 2 Status', status: hardware.leg2Status },\r\n      { name: 'Leg 3 Status', status: hardware.leg3Status },\r\n      { name: 'Leg 4 Status', status: hardware.leg4Status },\r\n      { name: 'GPS', status: hardware.gps },\r\n      { name: 'Engine', status: hardware.engine },\r\n      { name: 'Battery', status: hardware.battery },\r\n      { name: 'Lidar Scanner', status: hardware.lidarScanner },\r\n      { name: 'Wi-Fi', status: hardware.wifi },\r\n      { name: '4G LTE', status: hardware.lte },\r\n      { name: 'CPU 1', status: hardware.cpu1 },\r\n      { name: 'CPU 2', status: hardware.cpu2 },\r\n      { name: 'Depth Cameras', status: hardware.depthCameras.join(', ') },\r\n      { name: 'Optical Cameras', status: hardware.opticalCameras.join(', ') },\r\n      { name: 'Thermal Camera', status: hardware.thermalCamera },\r\n      { name: 'Pan-Tilt Unit', status: hardware.panTiltUnit },\r\n      { name: 'Spotlight', status: hardware.spotlight },\r\n      { name: 'Ultrasonic Microphone', status: hardware.ultrasonicMicrophone },\r\n    ];\r\n  }\r\n\r\n  onTabChanged(event: MatTabChangeEvent) {\r\n    setTimeout(() => {\r\n      if (event.tab.textLabel === \"Live Feed\") {\r\n        this.liveFeed.engine.resize(); // ensures scene is correctly rendered\r\n      }\r\n    }, 0);\r\n  }\r\n\r\n  private isSameState(state1: AgentState, state2: AgentState): boolean {\r\n    return state1.position.equals(state2.position) &&\r\n           state1.batteryLevel === state2.batteryLevel &&\r\n           state1.status === state2.status;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "batteryLevel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "position",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Vector3",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Status",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "CommandHistoryItem",
            "id": "interface-CommandHistoryItem-87802373e009a9efbf94f7ed90c1fc3bad407c4e6cda2a07b9d766a3568baad016b64f717300f0400eb8805546a173b7ef252f316bab5d2fae3483168f8ac773",
            "file": "src/app/models/agent-details-dto.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Status } from './status.enum';\r\n\r\nexport type HardwareStatus = 'Running' | 'Failed' | 'Anomaly_detected';\r\n\r\nexport interface CommandHistoryItem {\r\n  initiatedBy: string;\r\n  timestamp: Date;\r\n  description: string;\r\n}\r\n\r\nexport interface AgentDetailsDto {\r\n  id: string;\r\n  name: string;\r\n  batteryLevel: number;\r\n  status: Status;\r\n\r\n  general: {\r\n    currentCommand: string;\r\n    model: 'ANYmal' | 'ANYmal X';\r\n    firmwareVersion: string;\r\n    firmwareLastUpdated: Date;\r\n    manualModeOn: boolean;\r\n    location: { x: number; y: number; z: number };\r\n    trekkerVersion: string;\r\n    trekkerLastUpdated: Date;\r\n  };\r\n\r\n  hardware: {\r\n    temperatureSensor: HardwareStatus;\r\n    pressureSensor: HardwareStatus;\r\n    leg1Status: HardwareStatus;\r\n    leg2Status: HardwareStatus;\r\n    leg3Status: HardwareStatus;\r\n    leg4Status: HardwareStatus;\r\n    gps: HardwareStatus;\r\n    engine: HardwareStatus;\r\n    battery: HardwareStatus;\r\n    lidarScanner: HardwareStatus;\r\n    wifi: HardwareStatus;\r\n    lte: HardwareStatus;\r\n    cpu1: HardwareStatus;\r\n    cpu2: HardwareStatus;\r\n    depthCameras: HardwareStatus[]; // Array for 6 cameras\r\n    opticalCameras: HardwareStatus[]; // Array for 2 cameras\r\n    thermalCamera: HardwareStatus;\r\n    panTiltUnit: HardwareStatus;\r\n    spotlight: HardwareStatus;\r\n    ultrasonicMicrophone: HardwareStatus;\r\n  };\r\n\r\n  recentImages: string[]; // URLs or IDs of recent images\r\n  commandHistory: CommandHistoryItem[]; // List of executed commands\r\n  statusHistory: { timestamp: Date; status: string }[]; // History of status changes\r\n}\r\n",
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "initiatedBy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "timestamp",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Mission",
            "id": "interface-Mission-07010d19069ba2c07958c77591d26a3ab1e9d2a16da9f4e1a5b5963d2273eceedf38417b3af872d11d2375c78636faf25010632beb5bbeebf816da878b302023",
            "file": "src/app/services/missions.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpService } from './http.service';\r\n\r\nexport interface Mission {\r\n  id?: string;\r\n  name: string;\r\n  commands: string[];\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class MissionsService {\r\n  private baseUrl = 'https://localhost:7272';\r\n\r\n  private commandsApiUrl = `${this.baseUrl}/commands`;\r\n  private missionsApiUrl = `${this.baseUrl}/missions`;\r\n\r\n  constructor(private http: HttpService) {}\r\n\r\n  async getCommands(): Promise<string[]> {\r\n    const response = await this.http.fetch(this.commandsApiUrl, {\r\n      method: 'GET',\r\n    });\r\n    return response.json();\r\n  }\r\n\r\n  async getMissions(): Promise<Mission[]> {\r\n    const response = await this.http.fetch(this.missionsApiUrl, {\r\n      method: 'GET',\r\n    });\r\n    return response.json();\r\n  }\r\n\r\n  async createMission(mission: Mission): Promise<Mission> {\r\n    const response = await this.http.fetch(this.missionsApiUrl + '/create', {\r\n      method: 'POST',\r\n      body: JSON.stringify(mission),\r\n    });\r\n    return response.json();\r\n  }\r\n\r\n  async deleteMission(missionid: string): Promise<void> {\r\n    await this.http.fetch(this.missionsApiUrl + `?missionId=${missionid}`, {\r\n      method: 'DELETE',\r\n    });\r\n  }\r\n\r\n  async executeMission(agentId: string, missionId: string): Promise<void> {\r\n    await this.http.fetch(this.missionsApiUrl + '/execute', {\r\n      method: 'POST',\r\n      body: JSON.stringify({ agentId, missionId }),\r\n    });\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "commands",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "AdminService",
            "id": "injectable-AdminService-1767621c2bd41dd65f8153e0f3bf4ba081ad08d6525f8b66cb268360e567a5e4391418e8fc049f4564e97a553b7bbb95a842d402b0e09508bde28dff73aca0f9",
            "file": "src/app/services/admin.service.ts",
            "properties": [
                {
                    "name": "apiUrl",
                    "defaultValue": "'https://localhost:7272/Admin/list'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        123,
                        148
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getUsers",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<literal type[]>",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpService } from './http.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AdminService {\r\n  private readonly apiUrl = 'https://localhost:7272/Admin/list';\r\n\r\n  constructor(private http: HttpService) {}\r\n\r\n  async getUsers(): Promise<{ uid: string; email: string }[]> {\r\n    const response = await this.http.fetch(this.apiUrl, {\r\n      method: 'GET',\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Network response was not ok: ${response.statusText}`);\r\n    }\r\n\r\n    return response.json();\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "AgentService",
            "id": "injectable-AgentService-3a5ed92bb2fd2d818147d626d0978f693e7df0fa83ac14999914637277ee8defd092a4c7e96ccc18f331d9c4b3ecaa766265fbce51c35864cfe03979263f9e2f",
            "file": "src/app/services/agent.service.ts",
            "properties": [
                {
                    "name": "agent$",
                    "defaultValue": "this.agentSubject.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "agents$",
                    "defaultValue": "this.agentsSubject.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "agentsSubject",
                    "defaultValue": "new BehaviorSubject<AgentDto[]>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "agentSubject",
                    "defaultValue": "new BehaviorSubject<AgentDetailsDto | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "anomalyDetected$",
                    "defaultValue": "this.anomalyDetectedSubject.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "anomalyDetectedSubject",
                    "defaultValue": "new Subject<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "baseApiUrl",
                    "defaultValue": "`${this.baseUrl}/Anymal`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "baseUrl",
                    "defaultValue": "'https://localhost:7272'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "hardwareFailure$",
                    "defaultValue": "this.hardwareFailureSubject.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "hardwareFailureSubject",
                    "defaultValue": "new Subject<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "hubConnection",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "signalR.HubConnection",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "acousticMeasure",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 135,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "combustibleInspection",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "gasInspection",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 130,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "moveBackward",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 176,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "moveForward",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 171,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "moveLeft",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 161,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "moveRight",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 166,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "performAction",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 181,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "rechargeAgent",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setManualMode",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "manualMode",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 140,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "manualMode",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "shutdownAgent",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "startAgentsStreaming",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "startAgentStreaming",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "stopConnection",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "thermalInspection",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "wakeupAgent",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Subject } from 'rxjs';\r\nimport { AgentDto } from '../models/agent-dto.model';\r\nimport { AgentDetailsDto } from '../models/agent-details-dto.model';\r\nimport { HttpService } from './http.service';\r\n\r\nimport * as signalR from '@microsoft/signalr';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AgentService {\r\n  private hubConnection: signalR.HubConnection;\r\n\r\n  private agentsSubject = new BehaviorSubject<AgentDto[]>([]);\r\n  private agentSubject = new BehaviorSubject<AgentDetailsDto | null>(null);\r\n  private anomalyDetectedSubject = new Subject<string>();\r\n  private hardwareFailureSubject = new Subject<string>();\r\n  \r\n  private baseUrl = 'https://localhost:7272';\r\n  private baseApiUrl = `${this.baseUrl}/Anymal`;\r\n\r\n  agents$ = this.agentsSubject.asObservable();\r\n  agent$ = this.agentSubject.asObservable();\r\n  anomalyDetected$ = this.anomalyDetectedSubject.asObservable();\r\n  hardwareFailure$ = this.hardwareFailureSubject.asObservable();\r\n\r\n  constructor(private http: HttpService) {\r\n    this.hubConnection = new signalR.HubConnectionBuilder()\r\n      .withUrl(`${this.baseUrl}/agentsHub`, { withCredentials: false })\r\n      .withAutomaticReconnect()\r\n      .configureLogging(signalR.LogLevel.Information)\r\n      .build();\r\n\r\n    this.hubConnection.on('ReceiveAgentsData', (agents: AgentDto[]) => {\r\n      this.agentsSubject.next(agents);\r\n    });\r\n\r\n    this.hubConnection.on('ReceiveAgentData', (agent: AgentDetailsDto) => {\r\n      this.agentSubject.next(agent);\r\n    });\r\n\r\n    this.hubConnection.on('AnomalyDetected', (data: string) => {\r\n      this.anomalyDetectedSubject.next(data);\r\n    });\r\n\r\n    this.hubConnection.on('HardwareFailure', (data: string) => {\r\n      this.hardwareFailureSubject.next(data);\r\n    });\r\n  }\r\n\r\n  stopConnection() {\r\n    if (this.hubConnection) {\r\n      this.hubConnection\r\n        .stop()\r\n        .then(() => console.log('SignalR Disconnected'))\r\n        .catch((err) => console.log('Error while stopping connection: ' + err));\r\n    }\r\n  }\r\n\r\n  startAgentsStreaming() {\r\n    this.hubConnection\r\n      .start()\r\n      .then(() => {\r\n        console.log('SignalR Connected');\r\n\r\n        this.hubConnection\r\n          .invoke('StreamAgentsData')\r\n          .catch((err) =>\r\n            console.error('Error while starting the stream', err)\r\n          );\r\n      })\r\n      .catch((err) => console.log('Error while starting connection: ' + err));\r\n\r\n    this.hubConnection.onreconnected(() => {\r\n      this.hubConnection\r\n        .invoke('StreamAgentsData')\r\n        .catch((err) => console.error('Error while starting the stream', err));\r\n    });\r\n  }\r\n\r\n  startAgentStreaming(id: string) {\r\n    this.hubConnection\r\n      .start()\r\n      .then(() => {\r\n        console.log('SignalR Connected');\r\n\r\n        this.hubConnection\r\n          .invoke('StreamAgentData', id)\r\n          .catch((err) =>\r\n            console.error('Error while starting the agent stream', err)\r\n          );\r\n      })\r\n      .catch((err) => console.log('Error while starting connection: ' + err));\r\n\r\n    this.hubConnection.onreconnected(() => {\r\n      this.hubConnection\r\n        .invoke('StreamAgentData', id)\r\n        .catch((err) =>\r\n          console.error('Error while starting the agent stream', err)\r\n        );\r\n    });\r\n  }\r\n\r\n  async rechargeAgent(id: string): Promise<void> {\r\n    const url = `${this.baseApiUrl}/rechargeBattery`;\r\n    await this.performAction(url, id);\r\n  }\r\n\r\n  async shutdownAgent(id: string): Promise<void> {\r\n    const url = `${this.baseApiUrl}/shutdown`;\r\n    await this.performAction(url, id);\r\n  }\r\n\r\n  async wakeupAgent(id: string): Promise<void> {\r\n    const url = `${this.baseApiUrl}/wakeup`;\r\n    await this.performAction(url, id);\r\n  }\r\n\r\n  async thermalInspection(id: string): Promise<void> {\r\n    const url = `${this.baseApiUrl}/thermalInspection`;\r\n    await this.performAction(url, id);\r\n  }\r\n\r\n  async combustibleInspection(id: string): Promise<void> {\r\n    const url = `${this.baseApiUrl}/combustibleInspection`;\r\n    await this.performAction(url, id);\r\n  }\r\n\r\n  async gasInspection(id: string): Promise<void> {\r\n    const url = `${this.baseApiUrl}/gasInspection`;\r\n    await this.performAction(url, id);\r\n  }\r\n\r\n  async acousticMeasure(id: string): Promise<void> {\r\n    const url = `${this.baseApiUrl}/acousticMeasure`;\r\n    await this.performAction(url, id);\r\n  }\r\n\r\n  async setManualMode(id: string, manualMode: boolean): Promise<void> {\r\n    const url = `${this.baseApiUrl}/setManualMode`;\r\n\r\n    try {\r\n      const response = await this.http.fetch(url, {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          id,\r\n          manualMode,\r\n        }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! Status: ${response.status}`);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error performing action:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async moveLeft(id: string): Promise<void> {\r\n    const url = `${this.baseApiUrl}/moveLeft`;\r\n    await this.performAction(url, id);\r\n  }\r\n\r\n  async moveRight(id: string): Promise<void> {\r\n    const url = `${this.baseApiUrl}/moveRight`;\r\n    await this.performAction(url, id);\r\n  }\r\n\r\n  async moveForward(id: string): Promise<void> {\r\n    const url = `${this.baseApiUrl}/moveForward`;\r\n    await this.performAction(url, id);\r\n  }\r\n\r\n  async moveBackward(id: string): Promise<void> {\r\n    const url = `${this.baseApiUrl}/moveBackward`;\r\n    await this.performAction(url, id);\r\n  }\r\n\r\n  private async performAction(url: string, id: string): Promise<void> {\r\n    try {\r\n      const response = await this.http.fetch(url, {\r\n        method: 'POST',\r\n        body: JSON.stringify(id),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! Status: ${response.status}`);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error performing action:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "AuthService",
            "id": "injectable-AuthService-50e6187b149494ec44d65077988a95d71830b608e7b6dc438bb9635844c84c6553260348b8af8564de4b6c31bb1ed5cc545ab47ff889749a7c41e284ca5f40ca",
            "file": "src/app/services/auth.service.ts",
            "properties": [
                {
                    "name": "db",
                    "defaultValue": "getFirestore()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "firebaseToken",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "initialized$",
                    "defaultValue": "new BehaviorSubject<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "loggedIn$",
                    "defaultValue": "new BehaviorSubject<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "userRole$",
                    "defaultValue": "new BehaviorSubject<string | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "clearUserState",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "fetchUserRole",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<string | null>",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initializeAuthState",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateUserState",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { signInWithEmailAndPassword, signOut, onAuthStateChanged } from 'firebase/auth';\r\nimport { getFirestore, doc, getDoc } from 'firebase/firestore';\r\nimport { auth } from '../firebase-config';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthService {\r\n  private loggedIn$ = new BehaviorSubject<boolean>(false);\r\n  private userRole$ = new BehaviorSubject<string | null>(null);\r\n  private initialized$ = new BehaviorSubject<boolean>(false);\r\n  private db = getFirestore();\r\n  private firebaseToken?: string;\r\n\r\n  get isLoggedIn$(): Observable<boolean> {\r\n    return this.loggedIn$.asObservable();\r\n  }\r\n\r\n  get currentUserRole$(): Observable<string | null> {\r\n    return this.userRole$.asObservable();\r\n  }\r\n\r\n  get isInitialized$(): Observable<boolean> {\r\n    return this.initialized$.asObservable();\r\n  }\r\n\r\n  get accessToken() {\r\n    return this.firebaseToken;\r\n  }\r\n\r\n  login(email: string, password: string): Promise<void> {\r\n    return signInWithEmailAndPassword(auth, email, password)\r\n      .then(() => this.updateUserState(email))\r\n      .catch((error) => {\r\n        console.error('Login error', error);\r\n        this.clearUserState();\r\n      });\r\n  }\r\n\r\n  logout(): Promise<void> {\r\n    return signOut(auth)\r\n      .then(() => this.clearUserState())\r\n      .catch((error) => console.error('Logout error', error));\r\n  }\r\n\r\n  initializeAuthState(): Promise<void> {\r\n    return new Promise((resolve) => {\r\n      onAuthStateChanged(auth, async (user) => {\r\n        if (user) {\r\n          this.firebaseToken = await user.getIdToken();\r\n          await this.updateUserState(user.email!);\r\n        } else {\r\n          this.clearUserState();\r\n        }\r\n        this.initialized$.next(true);\r\n        resolve(); // Resolving the promise after initialization\r\n      });\r\n    });\r\n  }\r\n\r\n  private async updateUserState(email: string): Promise<void> {\r\n    const role = await this.fetchUserRole(email);\r\n    this.loggedIn$.next(true);\r\n    this.userRole$.next(role);\r\n  }\r\n\r\n  private clearUserState(): void {\r\n    this.firebaseToken = undefined;\r\n    this.loggedIn$.next(false);\r\n    this.userRole$.next(null);\r\n  }\r\n\r\n  private async fetchUserRole(email: string): Promise<string | null> {\r\n    try {\r\n      const docRef = doc(this.db, 'userRoles', email);\r\n      const docSnap = await getDoc(docRef);\r\n\r\n      if (docSnap.exists()) {\r\n        return docSnap.data()['role'] || null;\r\n      } else {\r\n        console.log('No such document!');\r\n        return null;\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching user role:', error);\r\n      return null;\r\n    }\r\n  }\r\n}\r\n",
            "accessors": {
                "isLoggedIn$": {
                    "name": "isLoggedIn$",
                    "getSignature": {
                        "name": "isLoggedIn$",
                        "type": "",
                        "returnType": "Observable<boolean>",
                        "line": 17
                    }
                },
                "currentUserRole$": {
                    "name": "currentUserRole$",
                    "getSignature": {
                        "name": "currentUserRole$",
                        "type": "",
                        "returnType": "Observable<string | null>",
                        "line": 21
                    }
                },
                "isInitialized$": {
                    "name": "isInitialized$",
                    "getSignature": {
                        "name": "isInitialized$",
                        "type": "",
                        "returnType": "Observable<boolean>",
                        "line": 25
                    }
                },
                "accessToken": {
                    "name": "accessToken",
                    "getSignature": {
                        "name": "accessToken",
                        "type": "",
                        "returnType": "",
                        "line": 29
                    }
                }
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "HttpService",
            "id": "injectable-HttpService-7fae0f8a621476fa7a5295dfa0ef6cfde51631d48d958a2be90617c0e29fad21fc49c62dffe6ba420501579160b61cac7ecb40f807f287bad047d790642d98a8",
            "file": "src/app/services/http.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "fetch",
                    "args": [
                        {
                            "name": "input",
                            "type": "RequestInfo",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "init",
                            "type": "RequestInit",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<Response>",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "RequestInfo",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "init",
                            "type": "RequestInit",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { AuthService } from './auth.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class HttpService {\r\n  constructor(private authService: AuthService) {}\r\n\r\n  async fetch(input: RequestInfo, init?: RequestInit): Promise<Response> {\r\n    // Get the token from your AuthService\r\n    const token = this.authService.accessToken;\r\n\r\n    // Create or clone the headers object\r\n    const headers = new Headers(init?.headers || {});\r\n    headers.set('Authorization', `${token}`);\r\n    headers.set('Content-Type', 'application/json');\r\n\r\n    // Create the modified fetch options\r\n    const modifiedInit: RequestInit = {\r\n      ...init,\r\n      headers,\r\n    };\r\n\r\n    // Perform the fetch with the modified options\r\n    return fetch(input, modifiedInit);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "MissionsService",
            "id": "injectable-MissionsService-07010d19069ba2c07958c77591d26a3ab1e9d2a16da9f4e1a5b5963d2273eceedf38417b3af872d11d2375c78636faf25010632beb5bbeebf816da878b302023",
            "file": "src/app/services/missions.service.ts",
            "properties": [
                {
                    "name": "baseUrl",
                    "defaultValue": "'https://localhost:7272'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "commandsApiUrl",
                    "defaultValue": "`${this.baseUrl}/commands`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "missionsApiUrl",
                    "defaultValue": "`${this.baseUrl}/missions`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "createMission",
                    "args": [
                        {
                            "name": "mission",
                            "type": "Mission",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<Mission>",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "mission",
                            "type": "Mission",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteMission",
                    "args": [
                        {
                            "name": "missionid",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "missionid",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "executeMission",
                    "args": [
                        {
                            "name": "agentId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "missionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "agentId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "missionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCommands",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string[]>",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "getMissions",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<Mission[]>",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpService } from './http.service';\r\n\r\nexport interface Mission {\r\n  id?: string;\r\n  name: string;\r\n  commands: string[];\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class MissionsService {\r\n  private baseUrl = 'https://localhost:7272';\r\n\r\n  private commandsApiUrl = `${this.baseUrl}/commands`;\r\n  private missionsApiUrl = `${this.baseUrl}/missions`;\r\n\r\n  constructor(private http: HttpService) {}\r\n\r\n  async getCommands(): Promise<string[]> {\r\n    const response = await this.http.fetch(this.commandsApiUrl, {\r\n      method: 'GET',\r\n    });\r\n    return response.json();\r\n  }\r\n\r\n  async getMissions(): Promise<Mission[]> {\r\n    const response = await this.http.fetch(this.missionsApiUrl, {\r\n      method: 'GET',\r\n    });\r\n    return response.json();\r\n  }\r\n\r\n  async createMission(mission: Mission): Promise<Mission> {\r\n    const response = await this.http.fetch(this.missionsApiUrl + '/create', {\r\n      method: 'POST',\r\n      body: JSON.stringify(mission),\r\n    });\r\n    return response.json();\r\n  }\r\n\r\n  async deleteMission(missionid: string): Promise<void> {\r\n    await this.http.fetch(this.missionsApiUrl + `?missionId=${missionid}`, {\r\n      method: 'DELETE',\r\n    });\r\n  }\r\n\r\n  async executeMission(agentId: string, missionId: string): Promise<void> {\r\n    await this.http.fetch(this.missionsApiUrl + '/execute', {\r\n      method: 'POST',\r\n      body: JSON.stringify({ agentId, missionId }),\r\n    });\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "NotificationService",
            "id": "injectable-NotificationService-30557b8e877473f76d6c2d514d5c9d446c60f507e6f0f9256a716b76fb4ce276dda57b80110d000aee86e91a14411e3a5807a212f148dd91eca3f5a9d35c341e",
            "file": "src/app/services/notification.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "showNotification",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'Close'"
                        },
                        {
                            "name": "duration",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "5000"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'Close'",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "duration",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "5000",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class NotificationService {\r\n  constructor(private snackBar: MatSnackBar) {}\r\n\r\n  showNotification(message: string, action: string = 'Close', duration: number = 5000): void {\r\n    this.snackBar.open(message, action, {\r\n      duration: duration,\r\n    });\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "SearchService",
            "id": "injectable-SearchService-cc019d6a61a35eeae59719b4ed458c3d0ab0257d258566a99c5ed0d0ecb342ef499ec06a09e106df20a18d05efe6d9769a7e70f2f08b85d84fd1daab649a6790",
            "file": "src/app/services/search.service.ts",
            "properties": [
                {
                    "name": "searchTerm$",
                    "defaultValue": "this.searchTermSubject.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "searchTermSubject",
                    "defaultValue": "new BehaviorSubject<string>('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "clearSearchTerm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateSearchTerm",
                    "args": [
                        {
                            "name": "term",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "term",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class SearchService {\r\n  private searchTermSubject = new BehaviorSubject<string>('');\r\n  searchTerm$ = this.searchTermSubject.asObservable();\r\n\r\n  updateSearchTerm(term: string): void {\r\n    this.searchTermSubject.next(term);\r\n  }\r\n\r\n  clearSearchTerm(): void {\r\n    this.searchTermSubject.next('');\r\n  }\r\n}\r\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "SortingService",
            "id": "injectable-SortingService-da5a66687876fa598d9fbc1f3ab57857d6df90ded4e75144d6064be18e56ed5eea26ae0b6362ca1184177e4d2f446f782e5e5f442f66510d053dba96a47fe389",
            "file": "src/app/services/sorting.service.ts",
            "properties": [
                {
                    "name": "sortOption$",
                    "defaultValue": "this.sortOptionSubject.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "sortOptionSubject",
                    "defaultValue": "new BehaviorSubject<SortOption>('nameAsc')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "updateSortOption",
                    "args": [
                        {
                            "name": "option",
                            "type": "SortOption",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "SortOption",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\nexport type SortOption = 'nameAsc' | 'nameDesc' | 'batteryAsc' | 'batteryDesc';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class SortingService {\r\n  private sortOptionSubject = new BehaviorSubject<SortOption>('nameAsc');\r\n  sortOption$ = this.sortOptionSubject.asObservable();\r\n\r\n  updateSortOption(option: SortOption): void {\r\n    this.sortOptionSubject.next(option);\r\n  }\r\n}\r\n",
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [
        {
            "name": "AdminGuard",
            "id": "injectable-AdminGuard-4087a6672ab5ef5e4ddd06d2706078d1a1cac39fe111518ccbc00549feeab5dd710d87c8d061c68a270de8e000b0412121ac3aa4463040ac8a655f2352e9657a",
            "file": "src/app/guards/admin.guard.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable | Promise | boolean",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { CanActivate, Router } from '@angular/router';\r\nimport { map, Observable, of, switchMap, take } from 'rxjs';\r\nimport { AuthService } from '../services/auth.service';\r\nimport { Roles } from '../models/roles.enum';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AdminGuard implements CanActivate {\r\n  constructor(private authService: AuthService, private router: Router) {}\r\n\r\n  canActivate(): Observable<boolean> | Promise<boolean> | boolean {\r\n    return this.authService.isLoggedIn$.pipe(\r\n      take(1),\r\n      switchMap((loggedIn) => {\r\n        if (!loggedIn) {\r\n          this.router.navigate(['/login']);\r\n          return of(false);\r\n        }\r\n        return this.authService.currentUserRole$.pipe(\r\n          take(1),\r\n          map((role) => {\r\n            if (role === Roles.Admin) {\r\n              return true;\r\n            } else {\r\n              this.router.navigate(['/not-authorized']);\r\n              return false;\r\n            }\r\n          })\r\n        );\r\n      })\r\n    );\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "guard"
        },
        {
            "name": "AuthGuard",
            "id": "injectable-AuthGuard-3d5652d6fe5cb80d24b283021bd5c7acb391296e10832404e30030dbc3b6f779696f0b2c768b556ead0388bda73dd2cac9bffe62a0e9b8c8bd9f84238c2658f4",
            "file": "src/app/guards/auth.guard.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable | Promise | boolean",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { CanActivate, Router } from '@angular/router';\r\nimport { map, Observable, take } from 'rxjs';\r\nimport { AuthService } from '../services/auth.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthGuard implements CanActivate {\r\n  constructor(private authService: AuthService, private router: Router) {}\r\n\r\n  canActivate(): Observable<boolean> | Promise<boolean> | boolean {\r\n    return this.authService.isLoggedIn$.pipe(\r\n      take(1),\r\n      map(loggedIn => {\r\n        if (!loggedIn) {\r\n          this.router.navigate(['/login']);\r\n          return false;\r\n        }\r\n        return true;\r\n      })\r\n    );\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "guard"
        }
    ],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AdminComponent",
            "id": "component-AdminComponent-a35489868830f9254f21c367bf38f81dc182b99857e6ee3fd9c6e25cda0057a3e6d7e7d32913a334da97a50cdb79a3e6296cd52344ad63f2b4809a933d31d0f0",
            "file": "src/app/admin/admin.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-admin",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./admin.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "UserListComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { UserListComponent } from '../user-list/user-list.component';\r\n\r\n@Component({\r\n  selector: 'app-admin',\r\n  standalone: true,\r\n  imports: [UserListComponent],\r\n  templateUrl: './admin.component.html',\r\n  styleUrl: './admin.component.scss'\r\n})\r\nexport class AdminComponent {\r\n\r\n}\r\n",
            "styleUrl": "./admin.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<h2>Admin</h2>\r\n\r\n<app-user-list></app-user-list>"
        },
        {
            "name": "AgentBatteryLevelComponent",
            "id": "component-AgentBatteryLevelComponent-5000f6b0549a377aa02b1747f83737c14f88eb05fcedc23caf716ed3cca51f5d3ea4ce68b1c2196480c4765be02cd99dfe2c92402b6fc9b6577c85d8a4b560fe",
            "file": "src/app/agent-battery-level/agent-battery-level.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-agent-battery-level",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./agent-battery-level.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "batteryLevel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MatIconModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { MatIconModule } from '@angular/material/icon';\r\n\r\n@Component({\r\n  selector: 'app-agent-battery-level',\r\n  standalone: true,\r\n  imports: [MatIconModule],\r\n  templateUrl: './agent-battery-level.component.html',\r\n  styleUrl: './agent-battery-level.component.scss',\r\n})\r\nexport class AgentBatteryLevelComponent {\r\n  @Input() batteryLevel!: number;\r\n}\r\n",
            "styleUrl": "./agent-battery-level.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<p>\r\n  Battery Level: {{ batteryLevel }}% \r\n  \r\n  @if (batteryLevel < 5) {\r\n    <mat-icon>battery_alert</mat-icon>\r\n  }\r\n  @else if (batteryLevel <= 10) {\r\n    <mat-icon>battery_2_bar</mat-icon>\r\n  }\r\n  @else if (batteryLevel <= 25) {\r\n    <mat-icon>battery_3_bar</mat-icon>\r\n  } \r\n  @else if (batteryLevel <= 50) {\r\n    <mat-icon>battery_4_bar</mat-icon>\r\n  }\r\n</p>\r\n"
        },
        {
            "name": "AgentCardComponent",
            "id": "component-AgentCardComponent-de77acc5ab47b3132fd69ac91d238cbc55a0cb503a3bee74ea162876a60dc3e20a92fc8a3aa2c567da0231a52d2a94d1350c4ad54659ead452e25bdacc43c9f9",
            "file": "src/app/agent-card/agent-card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-agent-card",
            "styleUrls": [
                "./agent-card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./agent-card.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "agent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "AgentDto",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "displayActions",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "subscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "copyToClipboard",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onAllCommands",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onRecharge",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "onShutdown",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "onWakeup",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MatCardModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "RouterModule",
                    "type": "module"
                },
                {
                    "name": "AgentBatteryLevelComponent",
                    "type": "component"
                },
                {
                    "name": "AgentStatusComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnDestroy, OnInit } from '@angular/core';\r\nimport { AgentService } from '../services/agent.service';\r\nimport { AgentDto } from '../models/agent-dto.model';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { AgentBatteryLevelComponent } from '../agent-battery-level/agent-battery-level.component';\r\nimport { AgentStatusComponent } from '../agent-status/agent-status.component';\r\nimport { Router, RouterModule } from '@angular/router';\r\nimport { AuthService } from '../services/auth.service';\r\nimport { Subscription } from 'rxjs';\r\nimport { Roles } from '../models/roles.enum';\r\n\r\n@Component({\r\n  selector: 'app-agent-card',\r\n  standalone: true,\r\n  imports: [\r\n    MatCardModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    RouterModule,\r\n    AgentBatteryLevelComponent,\r\n    AgentStatusComponent,\r\n  ],\r\n  templateUrl: './agent-card.component.html',\r\n  styleUrls: ['./agent-card.component.scss'],\r\n})\r\nexport class AgentCardComponent implements OnInit, OnDestroy {\r\n  @Input() agent!: AgentDto;\r\n\r\n  displayActions: boolean = false;\r\n\r\n  private subscription!: Subscription;\r\n\r\n  constructor(\r\n    private agentService: AgentService,\r\n    private authService: AuthService,\r\n    private router: Router,\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.subscription = this.authService.currentUserRole$.subscribe((role) => {\r\n      this.displayActions = role !== Roles.Guest;\r\n    });\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    if (this.subscription) {\r\n      this.subscription.unsubscribe();\r\n    }\r\n  }\r\n\r\n  async onRecharge(): Promise<void> {\r\n    try {\r\n      await this.agentService.rechargeAgent(this.agent.id);\r\n      console.log(`Agent ${this.agent.name} recharged successfully.`);\r\n    } catch (error) {\r\n      console.error(`Failed to recharge agent ${this.agent.name}:`, error);\r\n    }\r\n  }\r\n\r\n  async onShutdown(): Promise<void> {\r\n    try {\r\n      await this.agentService.shutdownAgent(this.agent.id);\r\n      console.log(`Agent ${this.agent.name} shut down successfully.`);\r\n    } catch (error) {\r\n      console.error(`Failed to shut down agent ${this.agent.name}:`, error);\r\n    }\r\n  }\r\n\r\n  async onWakeup(): Promise<void> {\r\n    try {\r\n      await this.agentService.wakeupAgent(this.agent.id);\r\n      console.log(`Agent ${this.agent.name} woke up successfully.`);\r\n    } catch (error) {\r\n      console.error(`Failed to wake up agent ${this.agent.name}:`, error);\r\n    }\r\n  }\r\n\r\n  onAllCommands() {\r\n    this.router.navigate(['/commands', this.agent.id]);\r\n  }\r\n\r\n  copyToClipboard(id: string) {\r\n    navigator.clipboard\r\n      .writeText(id)\r\n      .then(() => {\r\n        console.log(`ID ${id} copied to clipboard`);\r\n      })\r\n      .catch((err) => {\r\n        console.error('Failed to copy: ', err);\r\n      });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "/* Style for the cards with spacing between them */\r\n.agent-card {\r\n  margin: 15px;\r\n  width: 400px;\r\n  transition: background-color 0.3s ease;\r\n  cursor: pointer; /* Change cursor to pointer on hover */\r\n}\r\n\r\n/* Hover effect: Change background color */\r\n.agent-card:hover {\r\n  background-color: #e0f7fa; /* Light blue background on hover */\r\n}\r\n\r\n/* Responsive adjustments */\r\n@media (max-width: 768px) {\r\n  .agents-container {\r\n    padding: 10px;\r\n    max-width: 100%;\r\n  }\r\n\r\n  .agent-card {\r\n    width: 100%; /* Make cards take full width on smaller screens */\r\n    margin: 10px 0;\r\n  }\r\n}\r\n\r\n/* Style the agent ID to be less prominent */\r\n.agent-id {\r\n  display: flex;\r\n  align-items: center;\r\n  font-size: 0.9em; /* Smaller font size for ID */\r\n  color: gray; /* Less prominent color */\r\n}\r\n\r\n/* Style the copy button */\r\n.agent-id button {\r\n  margin-left: 8px; /* Space between ID and button */\r\n  color: gray; /* Match the button color with the ID text */\r\n}\r\n\r\n/* Copy button hover effect */\r\n.agent-id button:hover {\r\n  color: black; /* Darken the button on hover */\r\n}\r\n\r\n.mat-mdc-card-content:last-child {\r\n  padding-bottom: 0px;\r\n}\r\n\r\n/* Style for the action buttons section */\r\nmat-card-actions {\r\n  display: flex;\r\n  justify-content: space-between; /* Space out buttons evenly */\r\n  padding: 8px; /* Add padding to the button section */\r\n  border-top: 1px solid #e0e0e0; /* Optional: Add a border to separate the actions */\r\n}\r\n\r\n/* Additional styling for the buttons */\r\nmat-card-actions button {\r\n  flex: 1; /* Ensure buttons take equal space */\r\n  margin: 0 4px; /* Add margin between buttons */\r\n}\r\n",
                    "styleUrl": "./agent-card.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "agentService",
                        "type": "AgentService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 33,
                "jsdoctags": [
                    {
                        "name": "agentService",
                        "type": "AgentService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<mat-card class=\"agent-card\">\r\n  <mat-card-header>\r\n    <mat-card-title>{{ agent.name }}</mat-card-title>\r\n    <mat-card-subtitle class=\"agent-id\">\r\n      ID: <span>{{ agent.id }}</span>\r\n      <button\r\n        mat-icon-button\r\n        (click)=\"copyToClipboard(agent.id)\"\r\n        aria-label=\"Copy ID\"\r\n      >\r\n        <mat-icon>content_copy</mat-icon>\r\n      </button>\r\n    </mat-card-subtitle>\r\n  </mat-card-header>\r\n  <mat-card-content>\r\n    <app-agent-battery-level [batteryLevel]=\"agent.batteryLevel\"></app-agent-battery-level>\r\n    <app-agent-status [status]=\"agent.status\"></app-agent-status>\r\n  </mat-card-content>\r\n  @if (displayActions) {\r\n    <mat-card-actions>\r\n      <button mat-raised-button color=\"primary\" [routerLink]=\"['/agents', agent.id]\">Details</button>\r\n      <button mat-button color=\"primary\" (click)=\"onRecharge()\">Recharge</button>\r\n      <button mat-button color=\"warn\" (click)=\"onShutdown()\">Shutdown</button>\r\n      <button mat-button color=\"accent\" (click)=\"onWakeup()\">Wakeup</button>\r\n      <button mat-button color=\"accent\" (click)=\"onAllCommands()\">Commands</button>\r\n    </mat-card-actions>\r\n  }\r\n</mat-card>\r\n"
        },
        {
            "name": "AgentDetailsComponent",
            "id": "component-AgentDetailsComponent-ce7fa88894a45c472e20faa852c2acc7acb2233c773661cd91e8cb6fcab58ac9ea49e240aa117e7ed338590cf0e6104c5ac2aa433ef5e06ac310d6f0d0b1a83b",
            "file": "src/app/agent-details/agent-details.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-agent-details",
            "styleUrls": [
                "./agent-details.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./agent-details.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "agent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AgentDetailsDto",
                    "optional": true,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "agentState",
                    "defaultValue": "{\r\n    name: '',\r\n    position: new Vector3(0, 0.65, 0),\r\n    batteryLevel: 100,\r\n    status: Status.Active\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AgentState",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "commandHistoryDataSource",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatTableDataSource<literal type>",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "hardwareItems",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type[]",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "liveFeed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AgentLiveFeedComponent",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'liveFeed'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "previousState",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AgentState | null",
                    "optional": false,
                    "description": "",
                    "line": 56,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "statusHistoryDataSource",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatTableDataSource<literal type>",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "subscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 64,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "createHardwareItems",
                    "args": [
                        {
                            "name": "hardware",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type[]",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "hardware",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isSameState",
                    "args": [
                        {
                            "name": "state1",
                            "type": "AgentState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state2",
                            "type": "AgentState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 146,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "state1",
                            "type": "AgentState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state2",
                            "type": "AgentState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onTabChanged",
                    "args": [
                        {
                            "name": "event",
                            "type": "MatTabChangeEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 138,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MatTabChangeEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NgIf"
                },
                {
                    "name": "NgFor"
                },
                {
                    "name": "DatePipe",
                    "type": "pipe"
                },
                {
                    "name": "MatCardModule",
                    "type": "module"
                },
                {
                    "name": "MatTabsModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatTableModule",
                    "type": "module"
                },
                {
                    "name": "MatListModule",
                    "type": "module"
                },
                {
                    "name": "RouterModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "AgentBatteryLevelComponent",
                    "type": "component"
                },
                {
                    "name": "AgentStatusComponent",
                    "type": "component"
                },
                {
                    "name": "AgentLiveFeedComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit, ViewChild } from '@angular/core';\r\nimport { ActivatedRoute, RouterModule } from '@angular/router';\r\nimport { AgentService } from '../services/agent.service';\r\nimport { AgentDetailsDto } from '../models/agent-details-dto.model';\r\nimport { AgentBatteryLevelComponent } from '../agent-battery-level/agent-battery-level.component';\r\nimport { AgentStatusComponent } from '../agent-status/agent-status.component';\r\nimport { Subscription } from 'rxjs';\r\nimport { CommonModule, DatePipe, NgFor, NgIf } from '@angular/common';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatTabChangeEvent, MatTabsModule } from '@angular/material/tabs';\r\nimport { MatTableDataSource, MatTableModule } from '@angular/material/table';\r\nimport { MatListModule } from '@angular/material/list';\r\nimport { AgentLiveFeedComponent } from \"../agent-live-feed/agent-live-feed.component\";\r\nimport { Status } from '../models/status.enum';\r\nimport { Vector3 } from '@babylonjs/core';\r\n\r\nexport interface AgentState {\r\n  name: string;\r\n  position: Vector3;\r\n  batteryLevel: number;\r\n  status: Status;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-agent-details',\r\n  standalone: true,\r\n  imports: [\r\n    NgIf,\r\n    NgFor,\r\n    DatePipe,\r\n    MatCardModule,\r\n    MatTabsModule,\r\n    MatButtonModule,\r\n    MatTableModule,\r\n    MatListModule,\r\n    RouterModule,\r\n    CommonModule,\r\n    AgentBatteryLevelComponent,\r\n    AgentStatusComponent,\r\n    AgentLiveFeedComponent\r\n],\r\n  templateUrl: './agent-details.component.html',\r\n  styleUrls: ['./agent-details.component.scss'],\r\n})\r\nexport class AgentDetailsComponent implements OnInit, OnDestroy {\r\n  @ViewChild('liveFeed') liveFeed!: AgentLiveFeedComponent;\r\n  \r\n  agentState: AgentState = {\r\n    name: '',\r\n    position: new Vector3(0, 0.65, 0),\r\n    batteryLevel: 100,\r\n    status: Status.Active\r\n  };\r\n\r\n  private previousState: AgentState | null = null;\r\n\r\n  agent?: AgentDetailsDto;\r\n  hardwareItems: { name: string; status: string }[] = [];\r\n  \r\n  statusHistoryDataSource!: MatTableDataSource<{ timestamp: Date; status: string }>;\r\n  commandHistoryDataSource!: MatTableDataSource<{ initiatedBy: string, timestamp: Date, description: string }>;\r\n  \r\n  private subscription!: Subscription;\r\n\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private agentService: AgentService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    const agentId = this.route.snapshot.paramMap.get('id');\r\n\r\n    // Start streaming real-time updates for the agent\r\n    this.agentService.startAgentStreaming(agentId!);\r\n\r\n    // Subscribe to real-time updates\r\n    this.subscription = this.agentService.agent$.subscribe((agent) => {\r\n      if (agent && agent.id === agentId) {\r\n        this.agent = agent;\r\n        this.hardwareItems = this.createHardwareItems(this.agent.hardware);\r\n        this.statusHistoryDataSource = new MatTableDataSource(this.agent.statusHistory);\r\n        this.commandHistoryDataSource = new MatTableDataSource(this.agent.commandHistory);\r\n\r\n        const newState: AgentState = {\r\n          name: this.agent.name,\r\n          position: new Vector3(\r\n            agent.general.location.x, \r\n            agent.general.location.y, \r\n            agent.general.location.z\r\n          ),\r\n          batteryLevel: agent.batteryLevel,\r\n          status: agent.status\r\n        };\r\n\r\n        if (!this.previousState || !this.isSameState(this.previousState, newState)) {\r\n          this.agentState = newState;\r\n          this.previousState = newState;\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    if (this.subscription) {\r\n      this.subscription.unsubscribe();\r\n    }\r\n\r\n    // Stop the connection when the component is destroyed\r\n    this.agentService.stopConnection();\r\n  }\r\n\r\n  createHardwareItems(hardware: any): { name: string; status: string }[] {\r\n    return [\r\n      { name: 'Temperature Sensor', status: hardware.temperatureSensor },\r\n      { name: 'Pressure Sensor', status: hardware.pressureSensor },\r\n      { name: 'Leg 1 Status', status: hardware.leg1Status },\r\n      { name: 'Leg 2 Status', status: hardware.leg2Status },\r\n      { name: 'Leg 3 Status', status: hardware.leg3Status },\r\n      { name: 'Leg 4 Status', status: hardware.leg4Status },\r\n      { name: 'GPS', status: hardware.gps },\r\n      { name: 'Engine', status: hardware.engine },\r\n      { name: 'Battery', status: hardware.battery },\r\n      { name: 'Lidar Scanner', status: hardware.lidarScanner },\r\n      { name: 'Wi-Fi', status: hardware.wifi },\r\n      { name: '4G LTE', status: hardware.lte },\r\n      { name: 'CPU 1', status: hardware.cpu1 },\r\n      { name: 'CPU 2', status: hardware.cpu2 },\r\n      { name: 'Depth Cameras', status: hardware.depthCameras.join(', ') },\r\n      { name: 'Optical Cameras', status: hardware.opticalCameras.join(', ') },\r\n      { name: 'Thermal Camera', status: hardware.thermalCamera },\r\n      { name: 'Pan-Tilt Unit', status: hardware.panTiltUnit },\r\n      { name: 'Spotlight', status: hardware.spotlight },\r\n      { name: 'Ultrasonic Microphone', status: hardware.ultrasonicMicrophone },\r\n    ];\r\n  }\r\n\r\n  onTabChanged(event: MatTabChangeEvent) {\r\n    setTimeout(() => {\r\n      if (event.tab.textLabel === \"Live Feed\") {\r\n        this.liveFeed.engine.resize(); // ensures scene is correctly rendered\r\n      }\r\n    }, 0);\r\n  }\r\n\r\n  private isSameState(state1: AgentState, state2: AgentState): boolean {\r\n    return state1.position.equals(state2.position) &&\r\n           state1.batteryLevel === state2.batteryLevel &&\r\n           state1.status === state2.status;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".agent-details {\r\n  .header {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    background: lightgray;\r\n    padding-left: 18px;\r\n    padding-right: 18px;\r\n  }\r\n\r\n  .mat-card {\r\n    margin: 20px 0;\r\n  }\r\n\r\n  .image-gallery {\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n\r\n    img {\r\n      width: 150px;\r\n      height: auto;\r\n      margin: 5px;\r\n    }\r\n  }\r\n\r\n  .property-name {\r\n    font-weight: bold;\r\n    margin-right: 8px;\r\n  }\r\n   \r\n  .mat-list-item {\r\n    display: flex;\r\n    align-items: center;\r\n  }\r\n  \r\n  .mat-list-item span.property-name {\r\n    flex: 0 0 200px;\r\n  }\r\n  \r\n  .status {\r\n    &.Running {\r\n      color: green;\r\n    }\r\n    &.Failed {\r\n      color: red;\r\n    }\r\n    &.Anomaly_detected {\r\n      color: orange;\r\n    }\r\n  }\r\n\r\n  mat-list-item:not(:last-child) {\r\n    border-bottom: 1px solid #e0e0e0;\r\n    padding-bottom: 8px;\r\n  }\r\n\r\n  .mat-mdc-row:hover {\r\n    background-color: #f0f0f0;\r\n  }\r\n}\r\n",
                    "styleUrl": "./agent-details.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "agentService",
                        "type": "AgentService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 64,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "agentService",
                        "type": "AgentService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div *ngIf=\"agent\" class=\"agent-details\">\r\n  <div class=\"header\">\r\n    <div>\r\n      <h2>{{ agent.name }} - Details</h2>\r\n    </div>\r\n    <div>\r\n      <button mat-raised-button color=\"primary\" [routerLink]=\"['/agents']\">\r\n        Back to Agents\r\n      </button>\r\n    </div>\r\n  </div>\r\n\r\n  <mat-tab-group animationDuration=\"0ms\" (selectedTabChange)=\"onTabChanged($event)\">\r\n    <!-- General Information Tab -->\r\n    <mat-tab label=\"General Information\">\r\n      <mat-card>\r\n        <mat-card-content>\r\n          <mat-list>\r\n            <mat-list-item>\r\n              <span class=\"property-name\">ID:</span> {{ agent.id }}\r\n            </mat-list-item>\r\n            <mat-list-item>\r\n              <span class=\"property-name\">Battery Level:</span> {{ agent.batteryLevel }}%\r\n            </mat-list-item>\r\n            <mat-list-item>\r\n              <span class=\"property-name\">Status:</span> {{ agent.status }}\r\n            </mat-list-item>\r\n            <mat-list-item>\r\n              <span class=\"property-name\">Current Command:</span> {{ agent.general.currentCommand }}\r\n            </mat-list-item>\r\n            <mat-list-item>\r\n              <span class=\"property-name\">Model:</span> {{ agent.general.model }}\r\n            </mat-list-item>\r\n            <mat-list-item>\r\n              <span class=\"property-name\">Firmware Version:</span> {{ agent.general.firmwareVersion }}\r\n            </mat-list-item>\r\n            <mat-list-item>\r\n              <span class=\"property-name\">Firmware Last Updated:</span> {{ agent.general.firmwareLastUpdated | date }}\r\n            </mat-list-item>\r\n            <mat-list-item>\r\n              <span class=\"property-name\">Manual Mode:</span> {{ agent.general.manualModeOn ? 'On' : 'Off' }}\r\n            </mat-list-item>\r\n            <mat-list-item>\r\n              <span class=\"property-name\">Location:</span> (x: {{ agent.general.location.x }}, y: {{ agent.general.location.y }}, z: {{ agent.general.location.z }})\r\n            </mat-list-item>\r\n            <mat-list-item>\r\n              <span class=\"property-name\">Trekker Version:</span> {{ agent.general.trekkerVersion }}\r\n            </mat-list-item>\r\n            <mat-list-item>\r\n              <span class=\"property-name\">Trekker Last Updated:</span> {{ agent.general.trekkerLastUpdated | date }}\r\n            </mat-list-item>\r\n          </mat-list>\r\n        </mat-card-content>\r\n      </mat-card>\r\n    </mat-tab>\r\n\r\n    <!-- Hardware Status Tab -->\r\n    <mat-tab label=\"Hardware Status\">\r\n      <mat-card>\r\n        <mat-card-content>\r\n          <mat-list>\r\n            <mat-list-item *ngFor=\"let item of hardwareItems\">\r\n              <span class=\"property-name\">{{ item.name }}:</span> <span class=\"status\" [ngClass]=\"item.status\">{{ item.status }}</span>\r\n            </mat-list-item>\r\n          </mat-list>\r\n        </mat-card-content>\r\n      </mat-card>\r\n    </mat-tab>\r\n\r\n    <!-- Live Feed Tab -->\r\n    <mat-tab label=\"Live Feed\">\r\n      <app-agent-live-feed #liveFeed [agentState]=\"agentState\"></app-agent-live-feed>\r\n    </mat-tab>\r\n\r\n    <!-- Recent Images Tab -->\r\n    <mat-tab label=\"Recent Images\">\r\n      <mat-card>\r\n        <mat-card-content>\r\n          <div class=\"image-gallery\">\r\n            <img *ngFor=\"let image of agent.recentImages\" [src]=\"image\" alt=\"Recent Image\">\r\n          </div>\r\n        </mat-card-content>\r\n      </mat-card>\r\n    </mat-tab>\r\n\r\n    <!-- Command History Tab -->\r\n    <mat-tab label=\"Command History\">\r\n      <mat-card>\r\n        <mat-card-content>\r\n          <table mat-table [dataSource]=\"commandHistoryDataSource\" class=\"mat-elevation-z8\">\r\n            <!-- Initiated By Column -->\r\n            <ng-container matColumnDef=\"initiatedBy\">\r\n              <th mat-header-cell *matHeaderCellDef> Initiated By </th>\r\n              <td mat-cell *matCellDef=\"let command\"> {{ command.initiatedBy }} </td>\r\n            </ng-container>\r\n\r\n            <!-- Timestamp Column -->\r\n            <ng-container matColumnDef=\"timestamp\">\r\n              <th mat-header-cell *matHeaderCellDef> Timestamp </th>\r\n              <td mat-cell *matCellDef=\"let command\"> \r\n                {{ command.timestamp | date: 'yyyy-MM-dd HH:mm:ss.SSS' }}\r\n              </td>\r\n            </ng-container>\r\n\r\n            <!-- Description Column -->\r\n            <ng-container matColumnDef=\"description\">\r\n              <th mat-header-cell *matHeaderCellDef> Command Description </th>\r\n              <td mat-cell *matCellDef=\"let command\"> {{ command.description }} </td>\r\n            </ng-container>\r\n            \r\n            <tr mat-header-row *matHeaderRowDef=\"['initiatedBy', 'timestamp', 'description']\"></tr>\r\n            <tr mat-row *matRowDef=\"let row; columns: ['initiatedBy', 'timestamp', 'description'];\"></tr>\r\n          </table>\r\n        </mat-card-content>\r\n      </mat-card>\r\n    </mat-tab>\r\n\r\n    <!-- Status History Tab -->\r\n    <mat-tab label=\"Status History\">\r\n      <mat-card>\r\n        <mat-card-content>\r\n          <table mat-table [dataSource]=\"statusHistoryDataSource\" class=\"mat-elevation-z8\">\r\n            <!-- Timestamp Column -->\r\n            <ng-container matColumnDef=\"timestamp\">\r\n              <th mat-header-cell *matHeaderCellDef> Timestamp </th>\r\n              <td mat-cell *matCellDef=\"let status\"> {{ status.timestamp | date }} </td>\r\n            </ng-container>\r\n\r\n            <!-- Status Column -->\r\n            <ng-container matColumnDef=\"status\">\r\n              <th mat-header-cell *matHeaderCellDef> Status </th>\r\n              <td mat-cell *matCellDef=\"let status\"> {{ status.status }} </td>\r\n            </ng-container>\r\n\r\n            <tr mat-header-row *matHeaderRowDef=\"['timestamp', 'status']\"></tr>\r\n            <tr mat-row *matRowDef=\"let row; columns: ['timestamp', 'status'];\"></tr>\r\n          </table>\r\n        </mat-card-content>\r\n      </mat-card>\r\n    </mat-tab>\r\n  </mat-tab-group>\r\n</div>\r\n"
        },
        {
            "name": "AgentLiveFeedComponent",
            "id": "component-AgentLiveFeedComponent-169300a31d0a2fb8a7eede1d840dff2369c20f6c0355a8d3562374614fd0ec770a7d01b544b0176d84ff04507d789a4a4beb1aaa28a073c449b55c50fde16f0f",
            "file": "src/app/agent-live-feed/agent-live-feed.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-agent-live-feed",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./agent-live-feed.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "agentState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "AgentState",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "agentMeshes",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Mesh[]",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "DEFAULT_COLOR",
                    "defaultValue": "new Color3(0.8, 0.5, 0.3)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "engine",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Engine",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "freeCamera",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FreeCamera",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isTopDownView",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "OFFLINE_COLOR",
                    "defaultValue": "new Color3(1, 0, 0)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "renderCanvas",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLCanvasElement>",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'renderCanvas', {static: true}"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "scene",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Scene",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "topDownCamera",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ArcRotateCamera",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "UNAVAILABLE_COLOR",
                    "defaultValue": "new Color3(0.5, 0.5, 0.5)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "modifierKind": [
                        123,
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "clearAgentMeshes",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 401,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "createAnymalAgent",
                    "args": [
                        {
                            "name": "position",
                            "type": "Vector3",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 278,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "position",
                            "type": "Vector3",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createCameras",
                    "args": [
                        {
                            "name": "canvas",
                            "type": "HTMLCanvasElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 140,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "canvas",
                            "type": "HTMLCanvasElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createGround",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 181,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "createLight",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 172,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "createRoom",
                    "args": [
                        {
                            "name": "position",
                            "type": "Vector3",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "size",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "height",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "thickness",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "objectColor",
                            "type": "Color3",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 227,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "position",
                            "type": "Vector3",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "size",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "height",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "thickness",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "objectColor",
                            "type": "Color3",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createRoomObject",
                    "args": [
                        {
                            "name": "position",
                            "type": "Vector3",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "color",
                            "type": "Color3",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 269,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "position",
                            "type": "Vector3",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "color",
                            "type": "Color3",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createRooms",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 199,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "handleKeyboardEvent",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 417,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'window:keydown', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initializeScene",
                    "args": [
                        {
                            "name": "canvas",
                            "type": "HTMLCanvasElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 132,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "canvas",
                            "type": "HTMLCanvasElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleView",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 407,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateAgentAppearance",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "batteryLevel",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "status",
                            "type": "Status",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "batteryLevel",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "status",
                            "type": "Status",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateAgentState",
                    "args": [
                        {
                            "name": "state",
                            "type": "AgentState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "AgentState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "window:keydown",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 417
                }
            ],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  ElementRef,\r\n  ViewChild,\r\n  AfterViewInit,\r\n  HostListener,\r\n  Input,\r\n  OnChanges,\r\n  SimpleChanges,\r\n} from '@angular/core';\r\n\r\nimport {\r\n  Engine,\r\n  Scene,\r\n  ArcRotateCamera,\r\n  Vector3,\r\n  HemisphericLight,\r\n  MeshBuilder,\r\n  FreeCamera,\r\n  Mesh,\r\n} from '@babylonjs/core';\r\nimport { StandardMaterial } from '@babylonjs/core/Materials/standardMaterial';\r\nimport { GridMaterial } from '@babylonjs/materials/grid/gridMaterial';\r\nimport { Color3 } from '@babylonjs/core/Maths/math.color';\r\nimport { AgentState } from '../agent-details/agent-details.component';\r\nimport { Status } from '../models/status.enum';\r\nimport { AdvancedDynamicTexture, TextBlock } from '@babylonjs/gui';\r\n\r\n@Component({\r\n  selector: 'app-agent-live-feed',\r\n  standalone: true,\r\n  imports: [],\r\n  templateUrl: './agent-live-feed.component.html',\r\n  styleUrl: './agent-live-feed.component.scss',\r\n})\r\nexport class AgentLiveFeedComponent implements AfterViewInit, OnChanges {\r\n  @ViewChild('renderCanvas', { static: true })\r\n  renderCanvas!: ElementRef<HTMLCanvasElement>;\r\n\r\n  @Input() agentState!: AgentState;\r\n\r\n  public engine!: Engine;\r\n  private scene!: Scene;\r\n\r\n  private topDownCamera!: ArcRotateCamera;\r\n  private freeCamera!: FreeCamera;\r\n\r\n  private isTopDownView = false; // Track the current view\r\n\r\n  private agentMeshes: Mesh[] = [];\r\n\r\n  private readonly OFFLINE_COLOR = new Color3(1, 0, 0); // Red for Offline\r\n  private readonly UNAVAILABLE_COLOR = new Color3(0.5, 0.5, 0.5); // Gray for Unavailable\r\n  private readonly DEFAULT_COLOR = new Color3(0.8, 0.5, 0.3); // Default color for other statuses\r\n\r\n  ngAfterViewInit(): void {\r\n    const canvas = this.renderCanvas.nativeElement;\r\n\r\n    this.engine = new Engine(canvas, true);\r\n    this.scene = new Scene(this.engine);\r\n\r\n    this.initializeScene(canvas);\r\n\r\n    this.engine.runRenderLoop(() => {\r\n      this.scene.render();\r\n    });\r\n\r\n    window.addEventListener('resize', () => {\r\n      this.engine.resize();\r\n    });\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes['agentState']) {\r\n      this.updateAgentState(changes['agentState'].currentValue);\r\n    }\r\n  }\r\n\r\n  private updateAgentState(state: AgentState): void {\r\n    this.clearAgentMeshes();\r\n\r\n    // Update the agent's position\r\n    this.createAnymalAgent(state.position);\r\n\r\n    // Update the agent's appearance based on batteryLevel and status\r\n    this.updateAgentAppearance(state.name, state.batteryLevel, state.status);\r\n  }\r\n\r\n  private updateAgentAppearance(name: string, batteryLevel: number, status: Status): void {\r\n    if (batteryLevel < 20) {\r\n      // Create a GUI\r\n      const advancedTexture = AdvancedDynamicTexture.CreateFullscreenUI(\r\n        'UI',\r\n        true,\r\n        this.scene\r\n      );\r\n\r\n      // Create a text block in GUI\r\n      const guiTextBlock = new TextBlock();\r\n      guiTextBlock.text = `Battery almost depleted for '${name}'`;\r\n      guiTextBlock.color = 'white';\r\n      guiTextBlock.fontSize = 24;\r\n      guiTextBlock.textHorizontalAlignment =\r\n        TextBlock.HORIZONTAL_ALIGNMENT_LEFT;\r\n      guiTextBlock.textVerticalAlignment = TextBlock.VERTICAL_ALIGNMENT_TOP;\r\n      guiTextBlock.paddingLeft = '10px'; // Add padding from the left\r\n      guiTextBlock.paddingTop = '10px'; // Add padding from the top\r\n      advancedTexture.addControl(guiTextBlock);\r\n    }\r\n\r\n    // Apply color based on status\r\n    let color: Color3;\r\n    switch (status) {\r\n      case Status.Offline:\r\n        color = this.OFFLINE_COLOR;\r\n        break;\r\n      case Status.Unavailable:\r\n        color = this.UNAVAILABLE_COLOR;\r\n        break;\r\n      default:\r\n        color = this.DEFAULT_COLOR;\r\n    }\r\n\r\n    // Apply color to each agent mesh\r\n    this.agentMeshes.forEach((mesh) => {\r\n      if (mesh.material instanceof StandardMaterial) {\r\n        (mesh.material as StandardMaterial).diffuseColor = color;\r\n      }\r\n    });\r\n  }\r\n\r\n  private initializeScene(canvas: HTMLCanvasElement): void {\r\n    this.createCameras(canvas);\r\n    this.createLight();\r\n    this.createGround();\r\n    this.createRooms();\r\n    this.createAnymalAgent(this.agentState.position);\r\n  }\r\n\r\n  private createCameras(canvas: HTMLCanvasElement): void {\r\n    // The ArcRotateCamera is designed to orbit around a target.\r\n    // It is ideal for situations where you want to focus on a particular object or point in the scene\r\n    // and allow the user to rotate around it.\r\n    // The camera orbits around a target point using three parameters: alpha, beta, and radius.\r\n    this.topDownCamera = new ArcRotateCamera(\r\n      'topDownCamera',\r\n      -Math.PI / 2,\r\n      Math.PI / 2.5,\r\n      50,\r\n      Vector3.Zero(),\r\n      this.scene,\r\n      true\r\n    );\r\n    this.topDownCamera.attachControl(canvas, true);\r\n\r\n    // The FreeCamera offers more traditional first-person or free movement controls.\r\n    // It can move freely in any direction (forward, backward, left, right, up, down) without being tied\r\n    // to a specific target or point of interest.\r\n    this.freeCamera = new FreeCamera(\r\n      'freeCamera',\r\n      new Vector3(0, 10, -30),\r\n      this.scene,\r\n      true\r\n    );\r\n    this.freeCamera.setTarget(Vector3.Zero());\r\n    this.freeCamera.attachControl(canvas, true);\r\n\r\n    // Initialize with the 3D camera\r\n    this.scene.activeCamera = this.freeCamera;\r\n  }\r\n\r\n  private createLight(): void {\r\n    // Add a light to the scene\r\n    const light = new HemisphericLight(\r\n      'light1',\r\n      new Vector3(0, 1, 0),\r\n      this.scene\r\n    );\r\n  }\r\n\r\n  private createGround(): void {\r\n    const gridMaterial = new GridMaterial('grid', this.scene);\r\n    gridMaterial.gridRatio = 1;\r\n    gridMaterial.majorUnitFrequency = 1;\r\n    gridMaterial.minorUnitVisibility = 0.45;\r\n    gridMaterial.backFaceCulling = false;\r\n    gridMaterial.mainColor = new Color3(1, 1, 1);\r\n    gridMaterial.lineColor = new Color3(0.5, 0.5, 0.5);\r\n\r\n    // Create a ground plane\r\n    const ground = MeshBuilder.CreateGround(\r\n      'ground',\r\n      { width: 50, height: 50, subdivisions: 50 },\r\n      this.scene\r\n    );\r\n    ground.material = gridMaterial;\r\n  }\r\n\r\n  private createRooms(): void {\r\n    const wallHeight = 3;\r\n    const wallThickness = 0.2;\r\n    const roomSize = 10;\r\n\r\n    this.createRoom(\r\n      new Vector3(-10, wallHeight / 2, -10),\r\n      roomSize,\r\n      wallHeight,\r\n      wallThickness,\r\n      new Color3(1, 0, 0) // Red object\r\n    );\r\n    this.createRoom(\r\n      new Vector3(10, wallHeight / 2, -10),\r\n      roomSize,\r\n      wallHeight,\r\n      wallThickness,\r\n      new Color3(0, 1, 0) // Green object\r\n    );\r\n    this.createRoom(\r\n      new Vector3(-10, wallHeight / 2, 10),\r\n      roomSize,\r\n      wallHeight,\r\n      wallThickness,\r\n      new Color3(0, 0, 1) // Blue object\r\n    );\r\n  }\r\n\r\n  private createRoom(\r\n    position: Vector3,\r\n    size: number,\r\n    height: number,\r\n    thickness: number,\r\n    objectColor: Color3\r\n  ): void {\r\n    const halfSize = size / 2;\r\n\r\n    // Create walls around the room\r\n    const wall1 = MeshBuilder.CreateBox(\r\n      'wall1',\r\n      { width: size, height: height, depth: thickness },\r\n      this.scene\r\n    );\r\n    wall1.position = new Vector3(position.x, position.y, position.z - halfSize);\r\n\r\n    const wall2 = MeshBuilder.CreateBox(\r\n      'wall2',\r\n      { width: size, height: height, depth: thickness },\r\n      this.scene\r\n    );\r\n    wall2.position = new Vector3(position.x, position.y, position.z + halfSize);\r\n\r\n    const wall3 = MeshBuilder.CreateBox(\r\n      'wall3',\r\n      { width: thickness, height: height, depth: size },\r\n      this.scene\r\n    );\r\n    wall3.position = new Vector3(position.x - halfSize, position.y, position.z);\r\n\r\n    const wall4 = MeshBuilder.CreateBox(\r\n      'wall4',\r\n      { width: thickness, height: height, depth: size },\r\n      this.scene\r\n    );\r\n    wall4.position = new Vector3(position.x + halfSize, position.y, position.z);\r\n\r\n    // Create a unique object in the room\r\n    this.createRoomObject(position, objectColor);\r\n  }\r\n\r\n  private createRoomObject(position: Vector3, color: Color3): void {\r\n    const object = MeshBuilder.CreateBox('roomObject', { size: 1 }, this.scene);\r\n    object.position = new Vector3(position.x, 0.5, position.z); // Placed directly on the ground\r\n\r\n    const material = new StandardMaterial('objectMaterial', this.scene);\r\n    material.diffuseColor = color;\r\n    object.material = material;\r\n  }\r\n\r\n  private createAnymalAgent(position: Vector3): void {\r\n    // Body\r\n    this.clearAgentMeshes();\r\n\r\n    const body = MeshBuilder.CreateBox(\r\n      'body',\r\n      { width: 1, height: 0.5, depth: 2 },\r\n      this.scene\r\n    );\r\n    body.position = new Vector3(position.x, position.y + 0.25, position.z);\r\n    this.agentMeshes.push(body);\r\n\r\n    // Head\r\n    const head = MeshBuilder.CreateBox(\r\n      'head',\r\n      { width: 0.6, height: 0.6, depth: 0.6 },\r\n      this.scene\r\n    );\r\n    head.position = new Vector3(\r\n      position.x,\r\n      position.y + 0.65,\r\n      position.z - 1.3\r\n    );\r\n    this.agentMeshes.push(head);\r\n\r\n    // Ears\r\n    const ear1 = MeshBuilder.CreateBox(\r\n      'ear1',\r\n      { width: 0.2, height: 0.4, depth: 0.1 },\r\n      this.scene\r\n    );\r\n    ear1.position = new Vector3(\r\n      position.x - 0.25,\r\n      position.y + 1,\r\n      position.z - 1.5\r\n    );\r\n    this.agentMeshes.push(ear1);\r\n\r\n    const ear2 = MeshBuilder.CreateBox(\r\n      'ear2',\r\n      { width: 0.2, height: 0.4, depth: 0.1 },\r\n      this.scene\r\n    );\r\n    ear2.position = new Vector3(\r\n      position.x + 0.25,\r\n      position.y + 1,\r\n      position.z - 1.5\r\n    );\r\n    this.agentMeshes.push(ear2);\r\n\r\n    // Legs\r\n    const leg1 = MeshBuilder.CreateCylinder(\r\n      'leg1',\r\n      { height: 0.6, diameter: 0.2 },\r\n      this.scene\r\n    );\r\n    leg1.position = new Vector3(\r\n      position.x - 0.4,\r\n      position.y - 0.3,\r\n      position.z + 0.7\r\n    );\r\n    this.agentMeshes.push(leg1);\r\n\r\n    const leg2 = MeshBuilder.CreateCylinder(\r\n      'leg2',\r\n      { height: 0.6, diameter: 0.2 },\r\n      this.scene\r\n    );\r\n    leg2.position = new Vector3(\r\n      position.x + 0.4,\r\n      position.y - 0.3,\r\n      position.z + 0.7\r\n    );\r\n    this.agentMeshes.push(leg2);\r\n\r\n    const leg3 = MeshBuilder.CreateCylinder(\r\n      'leg3',\r\n      { height: 0.6, diameter: 0.2 },\r\n      this.scene\r\n    );\r\n    leg3.position = new Vector3(\r\n      position.x - 0.4,\r\n      position.y - 0.3,\r\n      position.z - 0.7\r\n    );\r\n    this.agentMeshes.push(leg3);\r\n\r\n    const leg4 = MeshBuilder.CreateCylinder(\r\n      'leg4',\r\n      { height: 0.6, diameter: 0.2 },\r\n      this.scene\r\n    );\r\n    leg4.position = new Vector3(\r\n      position.x + 0.4,\r\n      position.y - 0.3,\r\n      position.z - 0.7\r\n    );\r\n    this.agentMeshes.push(leg4);\r\n\r\n    // Tail\r\n    const tail = MeshBuilder.CreateCylinder(\r\n      'tail',\r\n      { height: 0.8, diameter: 0.1 },\r\n      this.scene\r\n    );\r\n    tail.position = new Vector3(position.x, position.y + 0.2, position.z + 1.2);\r\n    tail.rotation.x = Math.PI / 4; // Rotate tail upwards\r\n    this.agentMeshes.push(tail);\r\n\r\n    // Add some basic material to the dog for better visualization\r\n    const dogMaterial = new StandardMaterial('dogMaterial', this.scene);\r\n    dogMaterial.diffuseColor = new Color3(0.8, 0.5, 0.3); // Brownish color\r\n    body.material = dogMaterial;\r\n    head.material = dogMaterial;\r\n    ear1.material = dogMaterial;\r\n    ear2.material = dogMaterial;\r\n    leg1.material = dogMaterial;\r\n    leg2.material = dogMaterial;\r\n    leg3.material = dogMaterial;\r\n    leg4.material = dogMaterial;\r\n    tail.material = dogMaterial;\r\n  }\r\n\r\n  private clearAgentMeshes(): void {\r\n    // Dispose all agent meshes before re-creating them\r\n    this.agentMeshes.forEach((mesh) => mesh.dispose());\r\n    this.agentMeshes = [];\r\n  }\r\n\r\n  toggleView(): void {\r\n    if (this.isTopDownView) {\r\n      this.scene.activeCamera = this.freeCamera;\r\n    } else {\r\n      this.scene.activeCamera = this.topDownCamera;\r\n    }\r\n    this.isTopDownView = !this.isTopDownView;\r\n  }\r\n\r\n  @HostListener('window:keydown', ['$event'])\r\n  handleKeyboardEvent(event: KeyboardEvent): void {\r\n    if (event.key === 'v') {\r\n      // Press 'v' to toggle view\r\n      this.toggleView();\r\n    }\r\n  }\r\n}\r\n",
            "styleUrl": "./agent-live-feed.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "AfterViewInit",
                "OnChanges"
            ],
            "templateData": "<div class=\"babylon-container\">\r\n  <button (click)=\"toggleView()\">Toggle View</button>\r\n  <canvas #renderCanvas></canvas>\r\n</div>\r\n"
        },
        {
            "name": "AgentsComponent",
            "id": "component-AgentsComponent-7bff4c2fbc1662fc7b41356ecafe04a00def786ed14007000aa88585234882fd85013455d2a3ba5f0887f146b8e0c92a19634f8e2c46285440cab8c4c12db6ec",
            "file": "src/app/agents/agents.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-agents",
            "styleUrls": [
                "./agents.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./agents.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "agents",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AgentDto[]",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "filteredAgents",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AgentDto[]",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "subscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "applyFilterAndSort",
                    "args": [
                        {
                            "name": "searchTerm",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "sortOption",
                            "type": "SortOption",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "searchTerm",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sortOption",
                            "type": "SortOption",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "sortAgents",
                    "args": [
                        {
                            "name": "agents",
                            "type": "AgentDto[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "sortOption",
                            "type": "SortOption",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "AgentDto[]",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "agents",
                            "type": "AgentDto[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sortOption",
                            "type": "SortOption",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "AgentCardComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { AgentService } from '../services/agent.service';\r\nimport { AgentDto } from '../models/agent-dto.model';\r\nimport { AgentCardComponent } from '../agent-card/agent-card.component';\r\nimport { combineLatest, Subscription } from 'rxjs';\r\nimport { SearchService } from '../services/search.service';\r\nimport { SortingService, SortOption } from '../services/sorting.service';\r\n\r\n@Component({\r\n  selector: 'app-agents',\r\n  standalone: true,\r\n  imports: [AgentCardComponent],\r\n  templateUrl: './agents.component.html',\r\n  styleUrls: ['./agents.component.scss'],\r\n})\r\nexport class AgentsComponent implements OnInit, OnDestroy {\r\n  agents: AgentDto[] = [];\r\n  filteredAgents: AgentDto[] = [];\r\n\r\n  private subscription!: Subscription;\r\n\r\n  constructor(\r\n    private agentService: AgentService,\r\n    private searchService: SearchService,\r\n    private sortingService: SortingService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    // Start streaming real-time updates for the agent\r\n    this.agentService.startAgentsStreaming();\r\n\r\n    this.subscription = combineLatest([\r\n      this.agentService.agents$,\r\n      this.searchService.searchTerm$,\r\n      this.sortingService.sortOption$,\r\n    ]).subscribe(([agents, searchTerm, sortOption]) => {\r\n      this.agents = agents;\r\n      this.applyFilterAndSort(searchTerm, sortOption);\r\n    });\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    if (this.subscription) {\r\n      this.subscription.unsubscribe();\r\n    }\r\n\r\n    // Stop the connection when the component is destroyed\r\n    this.agentService.stopConnection();\r\n  }\r\n\r\n  private applyFilterAndSort(searchTerm: string, sortOption: SortOption): void {\r\n    let filtered = this.agents;\r\n\r\n    if (searchTerm) {\r\n      filtered = filtered.filter(\r\n        (agent) =>\r\n          agent.id.includes(searchTerm) ||\r\n          agent.name.toLowerCase().includes(searchTerm.toLowerCase())\r\n      );\r\n    }\r\n\r\n    this.filteredAgents = this.sortAgents(filtered, sortOption);\r\n  }\r\n\r\n  private sortAgents(agents: AgentDto[], sortOption: SortOption): AgentDto[] {\r\n    return agents.sort((a, b) => {\r\n      switch (sortOption) {\r\n        case 'nameAsc':\r\n          return a.name.localeCompare(b.name);\r\n        case 'nameDesc':\r\n          return b.name.localeCompare(a.name);\r\n        case 'batteryAsc':\r\n          return a.batteryLevel - b.batteryLevel;\r\n        case 'batteryDesc':\r\n          return b.batteryLevel - a.batteryLevel;\r\n        default:\r\n          return 0;\r\n      }\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n}\r\n\r\n.filter-info {\r\n  padding: 0;\r\n  font-weight: bold;\r\n  font-size: 18px;\r\n}\r\n\r\n.agents-container {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 16px;\r\n  justify-content: center;\r\n}\r\n",
                    "styleUrl": "./agents.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "agentService",
                        "type": "AgentService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "searchService",
                        "type": "SearchService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "sortingService",
                        "type": "SortingService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "agentService",
                        "type": "AgentService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "searchService",
                        "type": "SearchService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sortingService",
                        "type": "SortingService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"container\">\r\n  <div class=\"filter-info\">\r\n    <p>{{ filteredAgents.length }} agent(s) found</p>\r\n  </div>\r\n\r\n  <div class=\"agents-container\">\r\n    @for (agent of filteredAgents; track agent.id) {\r\n    <app-agent-card [agent]=\"agent\"></app-agent-card>\r\n    }\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "AgentStatusComponent",
            "id": "component-AgentStatusComponent-ae6f34878836e2c9290847b9aa3f94600b1585e9e70a1819acfd1db4972d6a9c73f37716a25de358adb3d22201a8e6d96c97af87c0d1ada60b9e42c39845a883",
            "file": "src/app/agent-status/agent-status.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-agent-status",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./agent-status.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "Status",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "statusString",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, SimpleChanges } from '@angular/core';\r\nimport { Status, getStatusString } from '../models/status.enum';\r\n\r\n@Component({\r\n  selector: 'app-agent-status',\r\n  standalone: true,\r\n  imports: [],\r\n  templateUrl: './agent-status.component.html',\r\n  styleUrl: './agent-status.component.scss',\r\n})\r\nexport class AgentStatusComponent {\r\n  @Input() status!: Status;\r\n  statusString!: string;\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes['status']) {\r\n      this.statusString = getStatusString(this.status);\r\n    }\r\n  }\r\n}\r\n",
            "styleUrl": "./agent-status.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<p>Status: {{ statusString }}</p>"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-67bf614dda4e4e20808abbe3025828bf4087bc736bf19d86281f7a34e02af5b5776644a0a7171e4fe511f7569c58d786451cc9429970a254c3a436d19bdd6669",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'anybotics-workforce-ng'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "RouterOutlet"
                },
                {
                    "name": "AgentsComponent",
                    "type": "component"
                },
                {
                    "name": "LayoutComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { RouterOutlet } from '@angular/router';\r\nimport { AgentsComponent } from './agents/agents.component';\r\nimport { LayoutComponent } from \"./layout/layout.component\";\r\nimport { AgentService } from './services/agent.service';\r\nimport { NotificationService } from './services/notification.service';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  standalone: true,\r\n  imports: [RouterOutlet, AgentsComponent, LayoutComponent],\r\n  templateUrl: './app.component.html',\r\n  styleUrl: './app.component.scss'\r\n})\r\nexport class AppComponent {\r\n  title = 'anybotics-workforce-ng';\r\n\r\n  constructor(\r\n    private agentService: AgentService,\r\n    private notificationService: NotificationService) {\r\n      this.agentService.anomalyDetected$.subscribe(message => {\r\n        this.notificationService.showNotification(message);\r\n      });\r\n\r\n      this.agentService.hardwareFailure$.subscribe(message => {\r\n        this.notificationService.showNotification(message);\r\n      });\r\n    }\r\n}\r\n",
            "styleUrl": "./app.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "agentService",
                        "type": "AgentService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "notificationService",
                        "type": "NotificationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "agentService",
                        "type": "AgentService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "notificationService",
                        "type": "NotificationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<app-layout></app-layout>"
        },
        {
            "name": "CommandsComponent",
            "id": "component-CommandsComponent-72c0a75c4db9f10fea1f88b47540fd02f7727cd4f66813009ac89911b4af20bc70795914711cac8bb8894c62bfa3660a1a9baf7b5cbbc5951896aa42fd0568df",
            "file": "src/app/commands/commands.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-commands",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./commands.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "agentId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "isLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "acousticMeasure",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "combustibleInspection",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "gasInspection",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "moveBackward",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "moveForward",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "moveLeft",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "moveRight",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "performAction",
                    "args": [
                        {
                            "name": "action",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "action",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "recharge",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setManualMode",
                    "args": [
                        {
                            "name": "manualMode",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "manualMode",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "shutdown",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "thermalInspection",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "wakeup",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "RouterModule",
                    "type": "module"
                },
                {
                    "name": "MatListModule",
                    "type": "module"
                },
                {
                    "name": "MatProgressBarModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, RouterModule } from '@angular/router';\r\nimport { AgentService } from '../services/agent.service';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatListModule } from '@angular/material/list';\r\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\r\n\r\n@Component({\r\n  selector: 'app-commands',\r\n  standalone: true,\r\n  imports: [MatButtonModule, RouterModule, MatListModule, MatProgressBarModule],\r\n  templateUrl: './commands.component.html',\r\n  styleUrl: './commands.component.scss',\r\n})\r\nexport class CommandsComponent implements OnInit {\r\n  public agentId!: string | null;\r\n  public isLoading: boolean = false;\r\n\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private agentService: AgentService\r\n  ) {}\r\n\r\n  private performAction(action: () => Promise<void>) {\r\n    this.isLoading = true;\r\n    action().finally(() => {\r\n      this.isLoading = false;\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.agentId = this.route.snapshot.paramMap.get('id');\r\n  }\r\n\r\n  shutdown() {\r\n    this.performAction(() => this.agentService.shutdownAgent(this.agentId!));\r\n  }\r\n\r\n  recharge() {\r\n    this.performAction(() => this.agentService.rechargeAgent(this.agentId!));\r\n  }\r\n\r\n  wakeup() {\r\n    this.performAction(() => this.agentService.wakeupAgent(this.agentId!));\r\n  }\r\n\r\n  setManualMode(manualMode: boolean) {\r\n    this.performAction(() =>\r\n      this.agentService.setManualMode(this.agentId!, manualMode)\r\n    );\r\n  }\r\n\r\n  thermalInspection() {\r\n    this.performAction(() =>\r\n      this.agentService.thermalInspection(this.agentId!)\r\n    );\r\n  }\r\n\r\n  combustibleInspection() {\r\n    this.performAction(() =>\r\n      this.agentService.combustibleInspection(this.agentId!)\r\n    );\r\n  }\r\n\r\n  gasInspection() {\r\n    this.performAction(() => this.agentService.gasInspection(this.agentId!));\r\n  }\r\n\r\n  acousticMeasure() {\r\n    this.performAction(() => this.agentService.acousticMeasure(this.agentId!));\r\n  }\r\n\r\n  moveLeft() {\r\n    this.performAction(() => this.agentService.moveLeft(this.agentId!));\r\n  }\r\n\r\n  moveRight() {\r\n    this.performAction(() => this.agentService.moveRight(this.agentId!));\r\n  }\r\n\r\n  moveForward() {\r\n    this.performAction(() => this.agentService.moveForward(this.agentId!));\r\n  }\r\n\r\n  moveBackward() {\r\n    this.performAction(() => this.agentService.moveBackward(this.agentId!));\r\n  }\r\n}\r\n",
            "styleUrl": "./commands.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "agentService",
                        "type": "AgentService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "agentService",
                        "type": "AgentService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<h2>Perform commands {{ agentId }}</h2>\r\n\r\n@if (isLoading) {\r\n  <mat-progress-bar mode=\"indeterminate\"></mat-progress-bar>\r\n}\r\n\r\n<!-- TODO: this UI should be auto-generated from command description (coming from back-end) -->\r\n<h3>General</h3>\r\n<mat-list>\r\n  <mat-list-item>\r\n    <button mat-button color=\"primary\" (click)=\"recharge()\">Recharge</button>\r\n  </mat-list-item>\r\n  <mat-list-item>\r\n    <button mat-button color=\"primary\" (click)=\"shutdown()\">Shutdown</button>\r\n  </mat-list-item>\r\n  <mat-list-item>\r\n    <button mat-button color=\"primary\" (click)=\"wakeup()\">Wakeup</button>\r\n  </mat-list-item>\r\n</mat-list>\r\n\r\n<h3>Drive</h3>\r\n<mat-list>\r\n  <mat-list-item>\r\n    <button mat-button color=\"primary\" (click)=\"setManualMode(true)\">\r\n      SetManualMode On\r\n    </button>\r\n  </mat-list-item>\r\n  <mat-list-item>\r\n    <button mat-button color=\"primary\" (click)=\"setManualMode(false)\">\r\n      SetManualMode Off\r\n    </button>\r\n  </mat-list-item>\r\n  <mat-list-item>\r\n    <button mat-button color=\"primary\" (click)=\"moveLeft()\">Left</button>\r\n  </mat-list-item>\r\n  <mat-list-item>\r\n    <button mat-button color=\"primary\" (click)=\"moveRight()\">Right</button>\r\n  </mat-list-item>\r\n  <mat-list-item>\r\n    <button mat-button color=\"primary\" (click)=\"moveForward()\">\r\n      Forward\r\n    </button>\r\n  </mat-list-item>\r\n  <mat-list-item>\r\n    <button mat-button color=\"primary\" (click)=\"moveBackward()\">\r\n      Backward\r\n    </button>\r\n  </mat-list-item>\r\n</mat-list>\r\n\r\n<h3>Inspections</h3>\r\n<mat-list>\r\n  <mat-list-item>\r\n    <button mat-button color=\"primary\" (click)=\"thermalInspection()\">\r\n      ThermalInspection\r\n    </button>\r\n  </mat-list-item>\r\n  <mat-list-item>\r\n    <button mat-button color=\"primary\" (click)=\"combustibleInspection()\">\r\n      CombustibleInspection\r\n    </button>\r\n  </mat-list-item>\r\n  <mat-list-item>\r\n    <button mat-button color=\"primary\" (click)=\"gasInspection()\">\r\n      GasInspection\r\n    </button>\r\n  </mat-list-item>\r\n  <mat-list-item>\r\n    <button mat-button color=\"primary\" (click)=\"acousticMeasure()\">\r\n      AcousticMeasure\r\n    </button>\r\n  </mat-list-item>\r\n  <mat-list-item></mat-list-item>\r\n</mat-list>\r\n\r\n<mat-divider></mat-divider>\r\n\r\n<div style=\"padding-top: 12px\">\r\n  <button mat-raised-button color=\"primary\" [routerLink]=\"['/agents']\">\r\n    Back to Agents\r\n  </button>\r\n</div>\r\n"
        },
        {
            "name": "LayoutComponent",
            "id": "component-LayoutComponent-b8a9d3772451eb47e3090f304d4df6a4cc0c4f41d9e75ccd494efb82e59b1fb67217ca9f17d8d66f4aa7b6ec3513a50ae01605c5594a28093144a507472ed5db",
            "file": "src/app/layout/layout.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-layout",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./layout.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "RouterModule",
                    "type": "module"
                },
                {
                    "name": "NavbarComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { NavbarComponent } from \"../navbar/navbar.component\";\r\nimport { RouterModule } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-layout',\r\n  standalone: true,\r\n  imports: [RouterModule, NavbarComponent],\r\n  templateUrl: './layout.component.html',\r\n  styleUrl: './layout.component.scss'\r\n})\r\nexport class LayoutComponent {\r\n\r\n}\r\n",
            "styleUrl": "./layout.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"app-container\">\r\n  <app-navbar></app-navbar>\r\n  <div class=\"main-content\">\r\n    <router-outlet></router-outlet>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-e6072f3e9608c62996bbeb0b3baf998c2bf3b4396c6e65a4e3236741f2f2bbd50d503f74bb95b78b4027262a917ab553487f4555bc627d09ed2ef03c86204f92",
            "file": "src/app/login/login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login",
            "styleUrls": [
                "./login.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "authService",
                    "defaultValue": "inject(AuthService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "email",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "password",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "router",
                    "defaultValue": "inject(Router)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "showOrHidePassword",
                    "defaultValue": "signal(true)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "users",
                    "defaultValue": "[\r\n    { email: 'giacomo@anybotics.com', password: 'q1w2e3' },\r\n    { email: 'guest@anybotics.com', password: 'qwerty123' },\r\n    { email: 'admin@anybotics.com', password: 'q1w2e3' },\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "methodsClass": [
                {
                    "name": "clickEvent",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "login",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onUserSelect",
                    "args": [
                        {
                            "name": "user",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "MatFormFieldModule",
                    "type": "module"
                },
                {
                    "name": "MatInputModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatSelectModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, inject, signal } from '@angular/core';\r\nimport { AuthService } from '../services/auth.service';\r\nimport { Router } from '@angular/router';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatIconModule } from '@angular/material/icon';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  standalone: true,\r\n  imports: [\r\n    FormsModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatButtonModule,\r\n    MatSelectModule,\r\n    MatIconModule,\r\n  ],\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.scss'],\r\n})\r\nexport class LoginComponent {\r\n  private authService = inject(AuthService);\r\n  private router = inject(Router);\r\n\r\n  // Predefined users for quick selection\r\n  users = [\r\n    { email: 'giacomo@anybotics.com', password: 'q1w2e3' },\r\n    { email: 'guest@anybotics.com', password: 'qwerty123' },\r\n    { email: 'admin@anybotics.com', password: 'q1w2e3' },\r\n  ];\r\n\r\n  email = '';\r\n  password = '';\r\n\r\n  showOrHidePassword = signal(true);\r\n\r\n  login() {\r\n    this.authService.login(this.email, this.password).then(() => {\r\n      this.router.navigate(['/agents']);\r\n    });\r\n  }\r\n\r\n  onUserSelect(user: { email: string; password: string }) {\r\n    this.email = user.email;\r\n    this.password = user.password;\r\n  }\r\n\r\n  clickEvent(event: MouseEvent) {\r\n    this.showOrHidePassword.set(!this.showOrHidePassword());\r\n    event.stopPropagation();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".container {\r\n  width: 400px;\r\n  margin: 0 auto;\r\n  padding-top: 40px;\r\n\r\n  form {\r\n    display: flex;\r\n    flex-direction: column;\r\n  }\r\n}\r\n",
                    "styleUrl": "./login.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"container\">\r\n\r\n  <form (ngSubmit)=\"login()\">\r\n    <mat-form-field appearance=\"outline\">\r\n      <mat-label>Select predefined user</mat-label>\r\n      <mat-select (valueChange)=\"onUserSelect($event)\">\r\n        @for (user of users; track user.email) {\r\n          <mat-option [value]=\"user\">{{user.email}}</mat-option>\r\n        }\r\n      </mat-select>\r\n      <mat-icon matSuffix>account_circle</mat-icon> \r\n    </mat-form-field>\r\n\r\n    <mat-form-field appearance=\"outline\">\r\n      <mat-label>Email</mat-label>\r\n      <input\r\n        matInput\r\n        placeholder=\"Enter your email\"\r\n        name=\"email\"\r\n        required\r\n        [(ngModel)]=\"email\"\r\n      />\r\n      <mat-icon matSuffix>alternate_email</mat-icon>\r\n    </mat-form-field>\r\n\r\n    <mat-form-field appearance=\"outline\">\r\n      <mat-label>Password</mat-label>\r\n      <input\r\n        matInput\r\n        [type]=\"showOrHidePassword() ? 'password' : 'text'\"\r\n        placeholder=\"Enter your password\"\r\n        name=\"password\"\r\n        required\r\n        [(ngModel)]=\"password\"\r\n      />\r\n      <button\r\n        mat-icon-button\r\n        matSuffix\r\n        (click)=\"clickEvent($event)\"\r\n        [attr.aria-label]=\"'Hide password'\"\r\n        [attr.aria-pressed]=\"showOrHidePassword()\"\r\n      >\r\n        <mat-icon>{{ showOrHidePassword() ? \"visibility_off\" : \"visibility\" }}</mat-icon>\r\n      </button>\r\n    </mat-form-field>\r\n\r\n    <button mat-fab extended type=\"submit\" (click)=\"login()\">\r\n      Login\r\n    </button>\r\n  </form>\r\n\r\n</div>\r\n"
        },
        {
            "name": "LogoComponent",
            "id": "component-LogoComponent-9e7be1075d9920fea0a96322bdfaf7494c94d526141959f4455ecdb7c7256f860be0ffd698300cf5ba481031abb0f10194a221cc26c9339bb4df553e56582fb7",
            "file": "src/app/logo/logo.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-logo",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./logo.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-logo',\r\n  standalone: true,\r\n  imports: [],\r\n  templateUrl: './logo.component.html',\r\n  styleUrl: './logo.component.scss'\r\n})\r\nexport class LogoComponent {\r\n\r\n}\r\n",
            "styleUrl": "./logo.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"logo\">\r\n  <a\r\n    href=\"https://www.anybotics.com/?_gl=1*1nrrb2c*_up*MQ..&amp;gclid=Cj0KCQjwiOy1BhDCARIsADGvQnCR6D3qAgPqq74DjbyYydVxyUdn9Wu_Z47sw3hZubjktH6jsJ0RIgcaAhCMEALw_wcB\"\r\n  >\r\n    <img\r\n      src=\"//www.anybotics.com/wp-content/uploads/2019/07/anybotics-logo-light.png\"\r\n      alt=\"ANYbotics\"\r\n    />\r\n  </a>\r\n</div>\r\n"
        },
        {
            "name": "MissionsComponent",
            "id": "component-MissionsComponent-4075e5bf673dc7fc44f00d557ecce22aba63ab46e8ac55cb38520cdf25352ba203ce1c4d8b1a9cefd5bd5a663a8e3cb8c88135cb0279395417a9eb1554c09e89",
            "file": "src/app/missions/missions.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-missions",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./missions.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "agentId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "availableCommands",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "commandIdCounter",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "isLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "missionName",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "missions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Mission[]",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "selectedCommands",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type[]",
                    "optional": false,
                    "description": "",
                    "line": 36
                }
            ],
            "methodsClass": [
                {
                    "name": "addCommand",
                    "args": [
                        {
                            "name": "command",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "matSelect",
                            "type": "MatSelect",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "command",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "matSelect",
                            "type": "MatSelect",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteMission",
                    "args": [
                        {
                            "name": "missionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "missionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "executeMission",
                    "args": [
                        {
                            "name": "missionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "missionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadAvailableCommands",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "loadMissions",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "removeCommand",
                    "args": [
                        {
                            "name": "commandId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "commandId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveMission",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MatCardModule",
                    "type": "module"
                },
                {
                    "name": "MatFormFieldModule",
                    "type": "module"
                },
                {
                    "name": "MatSelectModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatListModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "MatChipsModule",
                    "type": "module"
                },
                {
                    "name": "MatInputModule",
                    "type": "module"
                },
                {
                    "name": "MatProgressBarModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatListModule } from '@angular/material/list';\r\nimport { MatSelect, MatSelectModule } from '@angular/material/select';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatChipsModule } from '@angular/material/chips';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Mission, MissionsService } from '../services/missions.service';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-missions',\r\n  standalone: true,\r\n  imports: [\r\n    MatCardModule,\r\n    MatFormFieldModule,\r\n    MatSelectModule,\r\n    MatButtonModule,\r\n    MatListModule,\r\n    MatIconModule,\r\n    MatChipsModule,\r\n    MatInputModule,\r\n    MatProgressBarModule,\r\n    ReactiveFormsModule \r\n  ],\r\n  templateUrl: './missions.component.html',\r\n  styleUrl: './missions.component.scss',\r\n})\r\nexport class MissionsComponent implements OnInit {\r\n  availableCommands: string[] = [];\r\n  selectedCommands: { id: number; command: string }[] = [];\r\n\r\n  missions: Mission[] = [];\r\n  missionName: string = '';\r\n  agentId!: string | null;\r\n\r\n  isLoading: boolean = false;\r\n  form: FormGroup;\r\n\r\n  private commandIdCounter: number = 0; // Counter to generate unique IDs\r\n\r\n  constructor(\r\n    private missionsService: MissionsService,\r\n    private route: ActivatedRoute,\r\n    private fb: FormBuilder\r\n  ) {\r\n    this.form = this.fb.group({\r\n      missionName: ['', Validators.required],\r\n      commands: [[], Validators.required],\r\n    });\r\n  }\r\n\r\n  async ngOnInit() {\r\n    this.agentId = this.route.snapshot.paramMap.get('id');\r\n\r\n    this.isLoading = true;\r\n    await this.loadAvailableCommands();\r\n    await this.loadMissions();\r\n    this.isLoading = false;\r\n  }\r\n\r\n  addCommand(command: string, matSelect: MatSelect) {\r\n    const commandObj = { id: this.commandIdCounter++, command };\r\n    this.selectedCommands.push(commandObj);\r\n    this.form\r\n      .get('commands')\r\n      ?.setValue(this.selectedCommands.map((c) => c.command));\r\n\r\n    matSelect.value = null; // Clear the selection\r\n  }\r\n\r\n  removeCommand(commandId: number) {\r\n    this.selectedCommands = this.selectedCommands.filter(\r\n      (c) => c.id !== commandId\r\n    );\r\n    this.form\r\n      .get('commands')\r\n      ?.setValue(this.selectedCommands.map((c) => c.command));\r\n  }\r\n\r\n  async loadAvailableCommands() {\r\n    this.availableCommands = await this.missionsService.getCommands();\r\n  }\r\n\r\n  async loadMissions() {\r\n    this.missions = await this.missionsService.getMissions();\r\n  }\r\n\r\n  async saveMission() {\r\n    if (this.form.invalid || this.selectedCommands.length === 0) {\r\n      return; // Prevent saving if the form is invalid or no commands are selected\r\n    }\r\n\r\n    const mission: Mission = {\r\n      id: '',\r\n      name: this.form.get('missionName')!.value,\r\n      commands: this.selectedCommands.map((c) => c.command),\r\n    };\r\n    const savedMission = await this.missionsService.createMission(mission);\r\n\r\n    this.selectedCommands = [];\r\n    this.missionName = '';\r\n\r\n    this.missions.push(savedMission);\r\n  }\r\n\r\n  async deleteMission(missionId: string) {\r\n    try {\r\n      await this.missionsService.deleteMission(missionId);\r\n      this.missions = this.missions.filter(mission => mission.id !== missionId);\r\n    } catch (error) {\r\n      console.error('Error deleting mission', error); // TODO: add notification\r\n    }\r\n  }\r\n\r\n  async executeMission(missionId: string) {\r\n    await this.missionsService.executeMission(this.agentId!, missionId);\r\n  }\r\n}\r\n",
            "styleUrl": "./missions.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "missionsService",
                        "type": "MissionsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 45,
                "jsdoctags": [
                    {
                        "name": "missionsService",
                        "type": "MissionsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "@if (isLoading) {\r\n<mat-progress-bar mode=\"indeterminate\"></mat-progress-bar>\r\n} @else {\r\n<mat-card class=\"create-mission\">\r\n  <mat-card-title>Create a Mission</mat-card-title>\r\n  <mat-card-content>\r\n    <form [formGroup]=\"form\">\r\n      <mat-form-field>\r\n        <input\r\n          matInput\r\n          placeholder=\"Mission Name\"\r\n          formControlName=\"missionName\"\r\n        />\r\n        @if (form.get('missionName')?.hasError('required')) {\r\n        <mat-error> Mission name is required </mat-error>\r\n        }\r\n      </mat-form-field>\r\n      <mat-form-field class=\"commands-dropdown\">\r\n        <mat-select\r\n          #matSelect\r\n          placeholder=\"Add Command\"\r\n          (valueChange)=\"addCommand($event, matSelect)\"\r\n        >\r\n          @for (command of availableCommands; track command) {\r\n          <mat-option [value]=\"command\">\r\n            {{ command }}\r\n          </mat-option>\r\n          }\r\n        </mat-select>\r\n      </mat-form-field>\r\n\r\n      <div class=\"selected-commands\">\r\n        <mat-chip-set>\r\n          @for (c of selectedCommands; track c.id) {\r\n          <mat-chip (removed)=\"removeCommand(c.id)\">\r\n            {{ c.command }}\r\n            <mat-icon matChipRemove>cancel</mat-icon>\r\n          </mat-chip>\r\n          } @empty {\r\n          <div>No commands selected</div>\r\n          }\r\n        </mat-chip-set>\r\n      </div>\r\n      <button\r\n        mat-raised-button\r\n        color=\"primary\"\r\n        (click)=\"saveMission()\"\r\n        [disabled]=\"form.invalid || selectedCommands.length === 0\"\r\n      >\r\n        Save Mission\r\n      </button>\r\n    </form>\r\n  </mat-card-content>\r\n</mat-card>\r\n\r\n<mat-card class=\"available-missions\">\r\n  <mat-card-title>Available Missions</mat-card-title>\r\n  <mat-card-content>\r\n    <mat-list>\r\n      @for (mission of missions; track mission.id) {\r\n      <mat-list-item>\r\n        {{ mission.name }}\r\n        <button\r\n          mat-raised-button\r\n          color=\"accent\"\r\n          (click)=\"executeMission(mission.id!)\"\r\n        >\r\n          Execute\r\n        </button>\r\n        <button\r\n          mat-raised-button\r\n          color=\"warn\"\r\n          (click)=\"deleteMission(mission.id!)\"\r\n        >\r\n          Delete\r\n        </button>\r\n      </mat-list-item>\r\n      } @empty {\r\n      <h3>No missions found.</h3>\r\n      }\r\n    </mat-list>\r\n  </mat-card-content>\r\n</mat-card>\r\n}\r\n"
        },
        {
            "name": "NavbarComponent",
            "id": "component-NavbarComponent-bd8c117fca295f6480489d108309fdf59c47c1fa4627abf58ad1b75adedf8f44d750f7d7080401d5d2daba8a3be8fa740df1b45f3dac794c2b18cc6a9f0b40dc",
            "file": "src/app/navbar/navbar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-navbar",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./navbar.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isLoggedIn",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MatToolbar"
                },
                {
                    "name": "UserProfileComponent",
                    "type": "component"
                },
                {
                    "name": "LogoComponent",
                    "type": "component"
                },
                {
                    "name": "SearchComponent",
                    "type": "component"
                },
                {
                    "name": "SortingComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { MatToolbar } from '@angular/material/toolbar';\r\nimport { UserProfileComponent } from '../user-profile/user-profile.component';\r\nimport { LogoComponent } from '../logo/logo.component';\r\nimport { AuthService } from '../services/auth.service';\r\nimport { SearchComponent } from '../search/search.component';\r\nimport { SortingComponent } from '../sorting/sorting.component';\r\n\r\n@Component({\r\n  selector: 'app-navbar',\r\n  standalone: true,\r\n  imports: [\r\n    MatToolbar,\r\n    UserProfileComponent,\r\n    LogoComponent,\r\n    SearchComponent,\r\n    SortingComponent,\r\n  ],\r\n  templateUrl: './navbar.component.html',\r\n  styleUrl: './navbar.component.scss',\r\n})\r\nexport class NavbarComponent implements OnInit {\r\n  isLoggedIn = false;\r\n\r\n  constructor(private authService: AuthService) {}\r\n\r\n  ngOnInit() {\r\n    this.authService.isLoggedIn$.subscribe(\r\n      (status) => (this.isLoggedIn = status)\r\n    );\r\n  }\r\n}\r\n",
            "styleUrl": "./navbar.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-toolbar color=\"primary\" class=\"navbar\">\r\n  <div class=\"navbar-left\">\r\n    <app-logo></app-logo>\r\n  </div>\r\n  @if (isLoggedIn) {\r\n  <div class=\"navbar-center\">\r\n    <app-search></app-search>\r\n    <app-sorting></app-sorting>\r\n  </div>\r\n  }\r\n  <div class=\"navbar-right\">\r\n    <app-user-profile></app-user-profile>\r\n  </div>\r\n</mat-toolbar>\r\n"
        },
        {
            "name": "NotAuthorizedComponent",
            "id": "component-NotAuthorizedComponent-0a59ddd17a5fef50290454866686cdec39847ba85cb3dc39bfd344acd03dca043377819434780cd883a97dc77e5c88df89a159d6b4a07e9cb7841cb3ecff7911",
            "file": "src/app/not-authorized/not-authorized.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-not-authorized",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./not-authorized.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "RouterModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-not-authorized',\r\n  standalone: true,\r\n  imports: [RouterModule],\r\n  templateUrl: './not-authorized.component.html',\r\n  styleUrl: './not-authorized.component.scss'\r\n})\r\nexport class NotAuthorizedComponent {\r\n\r\n}\r\n",
            "styleUrl": "./not-authorized.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"not-authorized-container\">\r\n  <h1>Access Denied</h1>\r\n  <p>You do not have permission to access this page.</p>\r\n  <a routerLink=\"/agents\" class=\"agents-link\">Go to Agents Page</a>\r\n</div>\r\n"
        },
        {
            "name": "SearchComponent",
            "id": "component-SearchComponent-3db6d68a958d759534db87589ad13bfcc4d82f15b31ebb8bd978d0d543eeba01340bd7f43271d9c30896af6a199d6b6e1bcbe8a5ca21f2a7e255a233df5d951c",
            "file": "src/app/search/search.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-search",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./search.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "searchTerm",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "clearSearch",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSearch",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatInputModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { SearchService } from '../services/search.service';\r\n\r\n@Component({\r\n  selector: 'app-search',\r\n  standalone: true,\r\n  imports: [FormsModule, MatButtonModule, MatInputModule],\r\n  templateUrl: './search.component.html',\r\n  styleUrl: './search.component.scss',\r\n})\r\nexport class SearchComponent {\r\n  searchTerm: string = '';\r\n\r\n  constructor(private searchService: SearchService) {}\r\n\r\n  onSearch(): void {\r\n    this.searchService.updateSearchTerm(this.searchTerm);\r\n  }\r\n\r\n  clearSearch(): void {\r\n    this.searchTerm = '';\r\n    this.searchService.clearSearchTerm();\r\n  }\r\n}\r\n",
            "styleUrl": "./search.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "searchService",
                        "type": "SearchService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "searchService",
                        "type": "SearchService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"search-bar\">\r\n  <input\r\n    matInput\r\n    placeholder=\"Search by ID or Name\"\r\n    [(ngModel)]=\"searchTerm\"\r\n    (keyup.enter)=\"onSearch()\"\r\n  />\r\n\r\n  <button mat-raised-button color=\"primary\" id=\"search-btn\" (click)=\"onSearch()\">Search</button>\r\n\r\n  @if (searchTerm) {\r\n  <button mat-raised-button color=\"primary\" id=\"clear-search-btn\" (click)=\"clearSearch()\">\r\n    Clear Search\r\n  </button>\r\n  }\r\n</div>\r\n"
        },
        {
            "name": "SortingComponent",
            "id": "component-SortingComponent-dad1e366c16b88af50867fd3f600d77d0575fd91571520a37c278e6754d4adaca9497c5f368b6b6c3d6e94a984b9260abcd63c25f66bbd141e34b12313b18e2a",
            "file": "src/app/sorting/sorting.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-sorting",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./sorting.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "sortOption",
                    "defaultValue": "'nameAsc'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SortOption",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "onSortOptionChange",
                    "args": [
                        {
                            "name": "value",
                            "type": "SortOption",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "SortOption",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MatSelectModule",
                    "type": "module"
                },
                {
                    "name": "MatOptionModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatOptionModule } from '@angular/material/core';\r\nimport { SortingService, SortOption } from '../services/sorting.service';\r\n\r\n@Component({\r\n  selector: 'app-sorting',\r\n  standalone: true,\r\n  imports: [MatSelectModule, MatOptionModule],\r\n  templateUrl: './sorting.component.html',\r\n  styleUrl: './sorting.component.scss',\r\n})\r\nexport class SortingComponent {\r\n  sortOption: SortOption = 'nameAsc';\r\n\r\n  constructor(private sortingService: SortingService) {}\r\n\r\n  onSortOptionChange(value: SortOption): void {\r\n    this.sortOption = value;\r\n    this.sortingService.updateSortOption(value);\r\n  }\r\n}\r\n",
            "styleUrl": "./sorting.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "sortingService",
                        "type": "SortingService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "sortingService",
                        "type": "SortingService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<mat-form-field class=\"sorting-dropdown\" appearance=\"outline\">\r\n  <mat-select class=\"sort-options\"\r\n    placeholder=\"Sort Agents\"\r\n    [(value)]=\"sortOption\"\r\n    (selectionChange)=\"onSortOptionChange($event.value)\"\r\n  >\r\n    <mat-option value=\"nameAsc\">Name (A to Z)</mat-option>\r\n    <mat-option value=\"nameDesc\">Name (Z to A)</mat-option>\r\n    <mat-option value=\"batteryAsc\">Battery Level (Low to High)</mat-option>\r\n    <mat-option value=\"batteryDesc\">Battery Level (High to Low)</mat-option>\r\n  </mat-select>\r\n</mat-form-field>\r\n"
        },
        {
            "name": "StorybookSampleComponent",
            "id": "component-StorybookSampleComponent-201fb08b8bb9938980819b739ebbbe5fe03332e75ae68520abdd4faf33e3fbac54dfc69bccf9157a394bbbb3006f6964b04ac6a20d32f0748f2f2a061f7c930c",
            "file": "src/app/storybook-sample/storybook-sample.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-storybook-sample",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./storybook-sample.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "task",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe shape of the task object\n",
                    "description": "<p>The shape of the task object</p>\n",
                    "line": 14,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onArchiveTask",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "EventEmitter"
                },
                {
                    "name": "onPinTask",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-storybook-sample',\r\n  standalone: true,\r\n  imports: [],\r\n  templateUrl: './storybook-sample.component.html',\r\n  styleUrl: './storybook-sample.component.scss'\r\n})\r\nexport default class StorybookSampleComponent {\r\n  /**\r\n   * The shape of the task object\r\n  */\r\n  @Input() task: any;\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output() onPinTask = new EventEmitter<Event>();\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output() onArchiveTask = new EventEmitter<Event>();\r\n}",
            "styleUrl": "./storybook-sample.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"list-item\">\r\n    <label [attr.aria-label]=\"task.title + ''\" for=\"title\">\r\n        <input type=\"text\" [value]=\"task.title\" readonly=\"true\" id=\"title\" name=\"title\" />\r\n    </label>\r\n</div>"
        },
        {
            "name": "UserListComponent",
            "id": "component-UserListComponent-ceb71fb89ec9f6db736dee5aa2a9610835efb2e93fa876c2ccccbf90e7d664dcd097733996333b43cf6a3bcca5cea2295615891ea46f619ee432e6f8f8790556",
            "file": "src/app/user-list/user-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-user-list",
            "styleUrls": [
                "./user-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./user-list.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "users",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type[]",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MatCardModule",
                    "type": "module"
                },
                {
                    "name": "MatListModule",
                    "type": "module"
                },
                {
                    "name": "MatProgressSpinnerModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatListModule } from '@angular/material/list';\r\nimport { AdminService } from '../services/admin.service';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\n\r\n@Component({\r\n  selector: 'app-user-list',\r\n  standalone: true,\r\n  imports: [MatCardModule, MatListModule, MatProgressSpinnerModule],\r\n  templateUrl: './user-list.component.html',\r\n  styleUrls: ['./user-list.component.scss'],\r\n})\r\nexport class UserListComponent implements OnInit {\r\n  isLoading: boolean = false;\r\n  users: { uid: string; email: string }[] = [];\r\n\r\n  constructor(private adminService: AdminService) {}\r\n\r\n  async ngOnInit() {\r\n    try {\r\n      this.isLoading = true;\r\n      this.users! = await this.adminService.getUsers();\r\n      this.isLoading = false;\r\n    } catch (error) {\r\n      console.error('Error fetching users:', error);\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./user-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "adminService",
                        "type": "AdminService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "adminService",
                        "type": "AdminService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "@if (isLoading) {\r\n<mat-spinner mode=\"indeterminate\"></mat-spinner>\r\n} @else {\r\n<mat-card class=\"user-list-card\">\r\n  <mat-card-header>\r\n    <mat-card-title>Users</mat-card-title>\r\n  </mat-card-header>\r\n  <mat-card-content>\r\n    @for (user of users; track user.uid) {\r\n    <div style=\"padding: 12px\">\r\n      <div>{{ user.uid }}</div>\r\n      <div>{{ user.email }}</div>\r\n    </div>\r\n    }\r\n  </mat-card-content>\r\n</mat-card>\r\n}\r\n"
        },
        {
            "name": "UserProfileComponent",
            "id": "component-UserProfileComponent-c491030b5333681dd7bc0f410286bfd24f8dd6f70e79de78f1891e91e1f61ced3fc47104819eada6cddd23ce4318a57ccbcae459c63831ca1110c5bbea978aab",
            "file": "src/app/user-profile/user-profile.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-user-profile",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./user-profile.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isAdmin",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "isLoggedIn",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "router",
                    "defaultValue": "inject(Router)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MatIcon"
                },
                {
                    "name": "MatMenuModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "RouterModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, inject } from '@angular/core';\r\nimport { MatIcon, MatIconModule } from '@angular/material/icon';\r\nimport { AuthService } from '../services/auth.service';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { Router, RouterModule } from '@angular/router';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { Roles } from '../models/roles.enum';\r\n\r\n@Component({\r\n  selector: 'app-user-profile',\r\n  standalone: true,\r\n  imports: [\r\n    MatIcon,\r\n    MatMenuModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    RouterModule,\r\n  ],\r\n  templateUrl: './user-profile.component.html',\r\n  styleUrl: './user-profile.component.scss',\r\n})\r\nexport class UserProfileComponent {\r\n  private router = inject(Router);\r\n\r\n  isLoggedIn = false;\r\n  isAdmin = false;\r\n\r\n  constructor(private authService: AuthService) {}\r\n\r\n  ngOnInit() {\r\n    this.authService.isLoggedIn$.subscribe(\r\n      (status) => (this.isLoggedIn = status)\r\n    );\r\n\r\n    this.authService.currentUserRole$.subscribe(\r\n      (role) => (this.isAdmin = role === Roles.Admin)\r\n    );\r\n  }\r\n\r\n  onLogout() {\r\n    this.authService.logout().then(() => {\r\n      this.router.navigate(['/login']);\r\n    });\r\n  }\r\n}\r\n",
            "styleUrl": "./user-profile.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "@if (isLoggedIn) {\r\n<button mat-icon-button [matMenuTriggerFor]=\"profileMenu\" style=\"color: white\">\r\n  <mat-icon>account_circle</mat-icon>\r\n</button>\r\n\r\n<mat-menu #profileMenu=\"matMenu\">\r\n  <button mat-menu-item>\r\n    <mat-icon>person</mat-icon>\r\n    <span>Profile</span>\r\n  </button>\r\n  <button mat-menu-item>\r\n    <mat-icon>settings</mat-icon>\r\n    <span>Settings</span>\r\n  </button>\r\n  @if (isAdmin) {\r\n  <button mat-menu-item [routerLink]=\"['/admin']\">\r\n    <mat-icon>supervisor_account</mat-icon>\r\n    <span>Admin</span>\r\n  </button>\r\n  }\r\n  <button mat-menu-item (click)=\"onLogout()\">\r\n    <mat-icon>logout</mat-icon>\r\n    <span>Logout</span>\r\n  </button>\r\n</mat-menu>\r\n}\r\n"
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "app",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/firebase-config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "initializeApp(firebaseConfig)"
            },
            {
                "name": "appConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApplicationConfig",
                "defaultValue": "{\r\n  providers: [\r\n    provideZoneChangeDetection({ eventCoalescing: true }),\r\n    provideRouter(routes),\r\n    provideAnimationsAsync(),\r\n    provideFirebaseApp(() => initializeApp(environment.firebaseConfig)),\r\n    provideAuth(() => getAuth()),\r\n    {\r\n      provide: APP_INITIALIZER,\r\n      useFactory: initializeAuth,\r\n      deps: [AuthService],\r\n      multi: true,\r\n    },\r\n  ],\r\n}"
            },
            {
                "name": "auth",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/firebase-config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "getAuth(app)"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any",
                "defaultValue": "{\r\n  production: false,\r\n  firebaseConfig: {\r\n    apiKey: \"AIzaSyBz6G-oi3GX4owL3qEl23huE5N2-zAHuco\",\r\n    authDomain: \"anybotics-c5ce9.firebaseapp.com\",\r\n    projectId: \"anybotics-c5ce9\",\r\n    storageBucket: \"anybotics-c5ce9.appspot.com\",\r\n    messagingSenderId: \"921263726246\",\r\n    appId: \"1:921263726246:web:a37dabc96e997916291e67\",\r\n    measurementId: \"G-YPHYHH5PCE\"\r\n  },\r\n}"
            },
            {
                "name": "firebaseConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/firebase-config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  apiKey: environment.firebaseConfig.apiKey,\r\n  authDomain: environment.firebaseConfig.authDomain,\r\n  projectId: environment.firebaseConfig.projectId,\r\n  storageBucket: environment.firebaseConfig.storageBucket,\r\n  messagingSenderId: environment.firebaseConfig.messagingSenderId,\r\n  appId: environment.firebaseConfig.appId,\r\n  measurementId: environment.firebaseConfig.measurementId,\r\n}"
            }
        ],
        "functions": [
            {
                "name": "getStatusString",
                "file": "src/app/models/status.enum.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "status",
                        "type": "Status",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "string",
                "jsdoctags": [
                    {
                        "name": "status",
                        "type": "Status",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "initializeAuth",
                "file": "src/app/app.config.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "HardwareStatus",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"Running\" | \"Failed\" | \"Anomaly_detected\"",
                "file": "src/app/models/agent-details-dto.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "SortOption",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"nameAsc\" | \"nameDesc\" | \"batteryAsc\" | \"batteryDesc\"",
                "file": "src/app/services/sorting.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            }
        ],
        "enumerations": [
            {
                "name": "Roles",
                "childs": [
                    {
                        "name": "Guest",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "guest"
                    },
                    {
                        "name": "Admin",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "admin"
                    },
                    {
                        "name": "Standard",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "standard"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/models/roles.enum.ts"
            },
            {
                "name": "Status",
                "childs": [
                    {
                        "name": "Unavailable",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 0
                    },
                    {
                        "name": "Active",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 1
                    },
                    {
                        "name": "Offline",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 2
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/models/status.enum.ts"
            }
        ],
        "groupedVariables": {
            "src/app/firebase-config.ts": [
                {
                    "name": "app",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/firebase-config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "initializeApp(firebaseConfig)"
                },
                {
                    "name": "auth",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/firebase-config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "getAuth(app)"
                },
                {
                    "name": "firebaseConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/firebase-config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  apiKey: environment.firebaseConfig.apiKey,\r\n  authDomain: environment.firebaseConfig.authDomain,\r\n  projectId: environment.firebaseConfig.projectId,\r\n  storageBucket: environment.firebaseConfig.storageBucket,\r\n  messagingSenderId: environment.firebaseConfig.messagingSenderId,\r\n  appId: environment.firebaseConfig.appId,\r\n  measurementId: environment.firebaseConfig.measurementId,\r\n}"
                }
            ],
            "src/app/app.config.ts": [
                {
                    "name": "appConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationConfig",
                    "defaultValue": "{\r\n  providers: [\r\n    provideZoneChangeDetection({ eventCoalescing: true }),\r\n    provideRouter(routes),\r\n    provideAnimationsAsync(),\r\n    provideFirebaseApp(() => initializeApp(environment.firebaseConfig)),\r\n    provideAuth(() => getAuth()),\r\n    {\r\n      provide: APP_INITIALIZER,\r\n      useFactory: initializeAuth,\r\n      deps: [AuthService],\r\n      multi: true,\r\n    },\r\n  ],\r\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "defaultValue": "{\r\n  production: false,\r\n  firebaseConfig: {\r\n    apiKey: \"AIzaSyBz6G-oi3GX4owL3qEl23huE5N2-zAHuco\",\r\n    authDomain: \"anybotics-c5ce9.firebaseapp.com\",\r\n    projectId: \"anybotics-c5ce9\",\r\n    storageBucket: \"anybotics-c5ce9.appspot.com\",\r\n    messagingSenderId: \"921263726246\",\r\n    appId: \"1:921263726246:web:a37dabc96e997916291e67\",\r\n    measurementId: \"G-YPHYHH5PCE\"\r\n  },\r\n}"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/models/status.enum.ts": [
                {
                    "name": "getStatusString",
                    "file": "src/app/models/status.enum.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "status",
                            "type": "Status",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "string",
                    "jsdoctags": [
                        {
                            "name": "status",
                            "type": "Status",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/app.config.ts": [
                {
                    "name": "initializeAuth",
                    "file": "src/app/app.config.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "authService",
                            "type": "AuthService",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "authService",
                            "type": "AuthService",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "src/app/models/roles.enum.ts": [
                {
                    "name": "Roles",
                    "childs": [
                        {
                            "name": "Guest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "guest"
                        },
                        {
                            "name": "Admin",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "admin"
                        },
                        {
                            "name": "Standard",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "standard"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/models/roles.enum.ts"
                }
            ],
            "src/app/models/status.enum.ts": [
                {
                    "name": "Status",
                    "childs": [
                        {
                            "name": "Unavailable",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 0
                        },
                        {
                            "name": "Active",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 1
                        },
                        {
                            "name": "Offline",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 2
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/models/status.enum.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "src/app/models/agent-details-dto.model.ts": [
                {
                    "name": "HardwareStatus",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"Running\" | \"Failed\" | \"Anomaly_detected\"",
                    "file": "src/app/models/agent-details-dto.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "src/app/services/sorting.service.ts": [
                {
                    "name": "SortOption",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"nameAsc\" | \"nameDesc\" | \"batteryAsc\" | \"batteryDesc\"",
                    "file": "src/app/services/sorting.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/admin/admin.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AdminComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/agent-battery-level/agent-battery-level.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AgentBatteryLevelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/agent-card/agent-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AgentCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/agent-details/agent-details.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AgentDetailsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/agent-details/agent-details.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AgentState",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/agent-live-feed/agent-live-feed.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AgentLiveFeedComponent",
                "coveragePercent": 0,
                "coverageCount": "0/28",
                "status": "low"
            },
            {
                "filePath": "src/app/agent-status/agent-status.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AgentStatusComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/agents/agents.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AgentsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "initializeAuth",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/commands/commands.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CommandsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/firebase-config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "app",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/firebase-config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "auth",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/firebase-config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "firebaseConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/guards/admin.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AdminGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/guards/auth.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AuthGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/layout.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LayoutComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/logo/logo.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LogoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/missions/missions.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MissionsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/models/agent-details-dto.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AgentDetailsDto",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/models/agent-details-dto.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CommandHistoryItem",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/models/agent-dto.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AgentDto",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/models/status.enum.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getStatusString",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/navbar/navbar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NavbarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/not-authorized/not-authorized.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NotAuthorizedComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/search/search.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SearchComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/services/admin.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AdminService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/services/agent.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AgentService",
                "coveragePercent": 0,
                "coverageCount": "0/29",
                "status": "low"
            },
            {
                "filePath": "src/app/services/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/services/http.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "HttpService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/services/missions.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MissionsService",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/services/missions.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Mission",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/services/notification.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "NotificationService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/services/search.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SearchService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/services/sorting.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SortingService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/sorting/sorting.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SortingComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/storybook-sample/storybook-sample.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StorybookSampleComponent",
                "coveragePercent": 25,
                "coverageCount": "1/4",
                "status": "low"
            },
            {
                "filePath": "src/app/user-list/user-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/user-profile/user-profile.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserProfileComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}