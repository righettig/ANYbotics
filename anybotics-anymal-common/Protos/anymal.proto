syntax = "proto3";

option csharp_namespace = "AnymalGrpc";

service AnymalService {
  rpc RegisterAgent (Agent) returns (RegistrationResponse);
  
  rpc UpdateBattery (BatteryUpdate) returns (UpdateResponse);
  rpc UpdateStatus (StatusUpdate) returns (UpdateResponse);

  // Server-side streaming RPCs for the API to notify ANYmal(s) about events
  rpc StreamRechargeBatteryEvents(RechargeBatteryEvent) returns (stream RechargeBatteryEvent);
  rpc StreamShutdownEvents(ShutdownEvent) returns (stream ShutdownEvent);
  rpc StreamWakeupEvents(WakeupEvent) returns (stream WakeupEvent);
  rpc StreamSetManualModeEvents(SetManualModeEvent) returns (stream SetManualModeEvent);
  rpc StreamThermalInspectionEvents(ThermalInspectionEvent) returns (stream ThermalInspectionEvent);
  rpc StreamCombustibleInspectionEvents(CombustibleInspectionEvent) returns (stream CombustibleInspectionEvent);
  rpc StreamGasInspectionEvents(GasInspectionEvent) returns (stream GasInspectionEvent);
  rpc StreamAcousticMeasureEvents(AcousticMeasureEvent) returns (stream AcousticMeasureEvent);
}

message Agent {
  string id = 1;
  string name = 2;
  int32 batteryLevel = 3;
  Status status = 4;
  bool manualMode = 5;
}

message BatteryUpdate {
  string id = 1;
  int32 batteryLevel = 2;
}

message StatusUpdate {
  string id = 1;
  Status status = 2;
}

enum Status {
  Unavailable = 0;
  Active = 1;
  Offline = 2;
}

message RegistrationResponse {
  bool success = 1;
  string message = 2;
}

message UpdateResponse {
  bool success = 1;
  string message = 2;
}

message RechargeBatteryEvent {
  string id = 1;
}

message ShutdownEvent {
  string id = 1;
}

message WakeupEvent {
  string id = 1;
}

message SetManualModeEvent {
  string id = 1;
  bool manualMode = 2;
}

message ThermalInspectionEvent {
  string id = 1;
}

message CombustibleInspectionEvent {
  string id = 1;
}

message GasInspectionEvent {
  string id = 1;
}

message AcousticMeasureEvent {
  string id = 1;
}
