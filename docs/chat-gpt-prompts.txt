1) I want a c# console application that represents a robotic agent. The agent has an id and a name. The agent has a status (idle, active, offline), a location, battery level and can perform activities. I would like to track of all the activities history as well as the current task. I want to know the health metrics and sensors data too.
This data should be simulated initially (I am planning on improving on this later). I want the agent to be able to provide real time updates using web sockets for status and location using web sockets (or any other suitable technology, like gRPC perhaps?).
The robot should be capable of storing inspection data and logs using a noSQL database, please provide an abstraction for that.

2) I have a dashboard application that display the status data for each robotic agent and send commands to specific robot(s). Write an API to serve this application. Updates for the front-end should come via signalR. Use ASP.Net stack.

3) I am implementing an application where I have multiple users and groups, each with their own group and role as below. 

“The supported roles ares:
Admin - can see all bots (including their statuses, battery levels, current and past activities, can send command to all of them, can manage users. A command is issued by a user. Commands are tracked and stored somewhere for auditing purposes. Admin users have full access to the audit list.
Managing users means add/remove users, move a user from a group to another, amend user details.

Normal user (can see only bots belonging to their own group). A group can have one more or agent fleet(s). Normal users do NOT have access to the audit of the group. Can send commands to an agent/fleet. Normal users have access to each bots data metric.

Group manager: can do everything that a normal user is capable of doing plus it can assign/revoke view rights to specific guest users. This means one or more metric can be seen by the target user. They can also see the audit trail of a group.

Guest, can be granted read-only access to one and one only fleet at a given time. They cannot see audit, no data other than bot id, location, and current activity can be accessed by default. They can be granted access to specific metrics by the group manager. The access lasts as long as the group manager decides for it to be (= no time).

Each user as an id a full name and email, a groupId.”

Help me cleaning up the model and highlight any potential issues with that.

4) Help me setting up a blank Angular project using Angular Material, Jest, Nx, NgRx, Storybook and Cypress

5) I want a c# console application that represent an agent called "anymal". Each agent has an id, a name and an initial battery level of 100. 
Every 10 seconds the battery level decreses by 1 until it reaches zero. I want to be able to register this agent with an API using gRPC and I want to communicate every time the battery decreases as well. I also want to send a message when the battery level finally reaches 0.

The api should be able to track in memory the details of each connected agent and expose an endpoint to retrieve all agents and an agent
given its id. Please use ASP.Net Core web api for the API. I want the API to log on the console every event that it receives from the anymal agents.

6) Now I want the agent name to be configurable via command line option

7) Let's introduce the Status property to an agent. The possible values are: Unavailable, and Active (which is the default value).
When the battery level reaches 0 then set the status to Unavailable. Make sure we have a way to notify the API when status goes to 
Unavailable via gRPC. Additionally I want the controller to return a more restricted model for an agent that only exposes the id, name, status and battery level.

8) I want to be able to recharge the agent's battery to its full level. I want to do so from the api via a post method accepting the id of the agent to recharge

9) I want to introduce 2 new endpoints that can be invoked via the API: Shutdown & Wakeup.
When Shutdown is invoked the agent status transitions to "Offline" and it should stop sending the updates for battery level.
When Wakeup is invoked the agent status goes back to "Active" unless the battery level is 0. In this case it stays Unavailable.
When going back to the Active status it should also start sending the updates for battery level.
If an agent is Offline then it should also ignore the Recharge requests

10) I need to expose a signalR endpoint to stream all the agents data to a front-end app. I need to get data in the shape of the AgentDto class. 
Also create a basic angular material app that shows this data.

I'd like to have more space between the cards and for the cards to be placed inside a container so that I have more space on the left and right. Also put a slight hover effect on the cards themselves.

11) Show me how can I run multiple agents from a single command line prompt by passing a json file. The file contains the name of the agents. 
Gimme 10 agents with randomised name please.

12) I'd like to extend the app by allowing the Recharge, Shutdown, Wakeup actions to be executed via web. I want the fetch api to be used.
The api url is https://localhost:7272. Please encapsulate all network calls into a dedicated service. 

13) I want to be able to perform a search by id or name. I want the component to be displayed on top of the agents components. I also want this component to be always visible no matter how many agent cards are displayed (i.e. if there are vertical scrollbars)

14) I would like to be able to sort the agents either by name (ascending/descending) or by  battery level (ascending/descending)

15) I want to be add a "view details" button for each agent card. When clicking on the button I should be redirected to a 
different route. I should then be presented with a more details view for the selected agent.

That is nice but the agent details screen does not show real time data. Also when routing from the browser url directly data is not shown as agentService.getAgentById cannot find data. Could you fix this while also ensuring live data is served?

16) I have an Angular application with the Angular Material library already setup. I want to create a layout that consists of a navbar and a main area. The navbar should be called app-navbar and should contain as child components app-logo, app-search, app-sorting and app-user-profile.
I do not need these components just the barebone design. In particular app-logo is used to display a logo and should stay on the left whereas
app-user-profile is used to display the icon of a user that when clicked should redirect to a login screen. app-user-profile should stay on the right. app-search & app-sorting should be rendered at the center of the navbar should only be displayed when logged in.
The main area will be used to contain the router-outlet and display child views. I do not need instructions on how to setup the angular application normal Angular Material. 

Could you provide the login component to be displayed at the screen center. Move isLoggedIn to a service. When logging in isLoggedIn should be set to true. When logged in when clicking on the user profile component a menu should be displayed with Logout as the only item. When clicked should change IsLoggedIn back to false.

17) I have the following component {PLACEHOLDER} that I display in the main content area irrespective to the logged in status. 
I now want to update the component so that when I am logged in the action buttons should be visible (otherwise they should be invisible).


18) I have this interface

export interface AgentDto {
  id: string;
  name: string;
  batteryLevel: number;
  status: string;
}

which is used by this component

import { Component, Input } from '@angular/core';

@Component({
  selector: 'app-agent-status',
  standalone: true,
  imports: [],
  templateUrl: './agent-status.component.html',
  styleUrl: './agent-status.component.scss',
})
export class AgentStatusComponent {
  @Input() status!: string;
}

whose template is <p>Status: {{ status }}</p>

The only allowed values are Unavailable, Active and Offline which correspond to the c# enum 

  public enum Status {
    Unavailable = 0,
    Active = 1,
    Offline = 2,
  }

Currently my app is displaying the numeric values. 

I would like to show the strings as well as introducing a front-end type

19) Introduce unit tests

20) The agent details component current look like this: 

import { Component, OnDestroy, OnInit } from '@angular/core';
import { ActivatedRoute, RouterModule } from '@angular/router';
import { AgentService } from '../services/agent.service';
import { AgentDto } from '../models/agent-dto.model';
import { AgentBatteryLevelComponent } from '../agent-battery-level/agent-battery-level.component';
import { AgentStatusComponent } from '../agent-status/agent-status.component';
import { Subscription } from 'rxjs';

@Component({
  selector: 'app-agent-details',
  standalone: true,
  imports: [RouterModule, AgentBatteryLevelComponent, AgentStatusComponent],
  templateUrl: './agent-details.component.html',
  styleUrls: ['./agent-details.component.scss'],
})
export class AgentDetailsComponent implements OnInit, OnDestroy {
  agent?: AgentDto;

  private subscription!: Subscription;

  constructor(
    private route: ActivatedRoute,
    private agentService: AgentService
  ) {}

  ngOnInit(): void {
    const agentId = this.route.snapshot.paramMap.get('id');

    // Start streaming real-time updates for the agent
    this.agentService.startAgentStreaming(agentId!);

    // Subscribe to real-time updates
    this.subscription = this.agentService.agent$.subscribe((agent) => {
      if (agent && agent.id === agentId) {
        this.agent = agent;
      }
    });
  }

  ngOnDestroy(): void {
    if (this.subscription) {
      this.subscription.unsubscribe();
    }

    // Stop the connection when the component is destroyed
    this.agentService.stopConnection();
  }
}

With template: 
	@if (agent) {
	<div class="agent-details">
	  <h2>{{ agent.name }} - Details</h2>
	  <p>ID: {{ agent.id }}</p>
	  <app-agent-battery-level [batteryLevel]="agent.batteryLevel"></app-agent-battery-level>
	  <app-agent-status [status]="agent.status"></app-agent-status>
	  <button mat-raised-button color="primary" [routerLink]="['/agents']">
		Back to Agents
	  </button>
	</div>
	}

I want to add the following properties to the agent details view:

General:
- CurrentCommand
- Model (ANYmal, ANYmal X)
- FirmwareVersion
- FirmwareLastUpdated
- ManualModeOn
- Location (x, y, z)
- TrekkerVersion
- TrekkerLastUpdated

Hardware: (each property in this list can have Running, Failed, Anomaly_detected as possible values)
  - Temperature sensor
  - Pressure sensor
  - Leg1Status, Leg2Status, Leg3Status, Leg4Status
  - GPS
  - Engine
  - Battery
  - Lidar scanner
  - WI-FI
  - 4G LTE
  - CPU_1, CPU_2
  - 6 depth cameras
  - 2 optical tele-operation cameras (20x)
  - Thermal camera (-40–550°C)
  - Pan-tilt-unit // high-range motion of the payload (+/- 90° vertical, +/- 165° horizontal)
  - Spotlight (maximal 3790lm supports visual inspections in the dark)
  - Ultrasonic microphone // record acoustic measurements in audible and ultrasonic frequencies (0—384kHz)

Considering I am also planning to add a way to retrieve the most recent acquired images, the list of executed commands, as well as the 
history for each status change, what would be a good design (using Angular material) to achieve that?

Please use a different Dto (AgentDetailsDto) to update the signalR model. 

Let me also know if you need more info from me. 

21) Add true login (Auth0 vs Firebase?). Two users (guest and myuser). UI for guest should be disabled.
	guest@anybotics.com    pass: qwerty123
	giacomo@anybotics.com  pass: q1w2e3
	
	Show me how can I integrate an angular application using firebase. I already have this auth service: 
		
		import { Injectable } from '@angular/core';
		import { BehaviorSubject } from 'rxjs';

		@Injectable({
		  providedIn: 'root',
		})
		export class AuthService {
		  private loggedIn = new BehaviorSubject<boolean>(false);

		  get isLoggedIn() {
			return this.loggedIn.asObservable();
		  }

		  login() {
			this.loggedIn.next(true);
		  }

		  logout() {
			this.loggedIn.next(false);
		  }
		}

	but I do not have a login component yet. I want to use standalone components only meaning I do NOT have app.module.ts (and I do not
	want to create it).
	
22) I have an app using firebase to authenticate users. I have created 3 users: 
	
		giacomo@anybotics.com
		guest@anybotics.com
		admin@anybotics.com
	
	show me how can I setup the firestore instance (I do not have one) to attach "role". I want:
		
		giacomo@anybotics.com -> standard
		guest@anybotics.com -> guest
		admin@anybotics.com -> admin

	guest should not be allowed to perform actions (replace isLoggedIn check on the agent-card)


23) Improve login component visuals (logo), find small image for robots too. Add dropdown to quickly select users
		giacomo@anybotics.com pass: q1w2e3
		guest@anybotics.com pass: qwerty123
		admin@anybotics.com pass: q1w2e3


24) Agent details to use "real data" move stubbed full agent data to API

25) Protect endpoints based on user role
	(I had to tweak the permissions associated to firebase-adminsdk-7igq5@anybotics-c5ce9.iam.gserviceaccount.com)

26) Refactor Program.cs

27) I want to be able to audit the commands (i.e. Recharge, Shutdown & Wakeup) that have been submitted to agents. 

	I would like to do that by using a command bus.
	
	Show me how to do that and how to refactor AnymalController. I also need to retrieve the full list of commands that have been 
	submitted to a given agent (by agent id).

28) update agent details screen to show all commands
		Please read the following code and let me know once you are ready by saying "OK".
		
			Back-end: {CODE}
			Front-end {CODE}

		The code I showed you is part of a solution consisting of a front-end writting in Angular and a c# back-end API using ASP.Net Core.
		The front-end app subscribes to a signalR hub (AgentsHub) to get real time data describing an agent (StreamAgentData). 
		The data is represented using the AgentDetailsDto class. 
		I now want to integrate a new http endpoint that I have added to the AnymalController called GetCommands. 
		The returned data should be added to the CommandHistory array in the dto.
		I also want to update the front-end dto model and make sure the corresponding table shows the additional data that is now available by means
		of new columns added to the UI table.
				
29) Introduce more commands | allow additional commands to be executed from details view
	- `thermal inspection`
	- `combustible inspection`
	- `gas inspection`
	- `acoustic measure`

32) Refactoring: it should be possible to have just a single command stream
	message AgentEvent { // https://stackoverflow.com/questions/59787586/the-right-way-to-send-generic-data-types-with-protobuf3-in-c-net
	  string id = 1;
	  string commandId = 2,
	  object payload = 3
	}

	also introduced command processor in anymal agent

33) Code generators
	OK ServiceCollectionExtensions.cs, use reflection here
		services.AddSingleton<ICommandHandler<RechargeBatteryCommand>, RechargeBatteryCommandHandler>();
        services.AddSingleton<ICommandHandler<ShutdownCommand>, ShutdownCommandHandler>();
        services.AddSingleton<ICommandHandler<WakeUpCommand>, WakeupCommandHandler>();
        services.AddSingleton<ICommandHandler<SetManualModeCommand>, SetManualModeCommandHandler>();
        services.AddSingleton<ICommandHandler<ThermalInspectionCommand>, ThermalInspectionCommandHandler>();
        services.AddSingleton<ICommandHandler<CombustibleInspectionCommand>, CombustibleInspectionCommandHandler>();
        services.AddSingleton<ICommandHandler<GasInspectionCommand>, GasInspectionCommandHandler>();
        services.AddSingleton<ICommandHandler<AcousticMeasureCommand>, AcousticMeasureCommandHandler>();
		
	OK AnymalController.cs, separate the endpoint to be in Controllers\Endpoints\Commands and use reflection to mount the endpoints
		
		{{COMMAND_NAME}}Controller.cs
		
		using anybotics_anymal_api.Commands;
		using anybotics_anymal_api.CustomAttributes;
		using Microsoft.AspNetCore.Mvc;

		namespace anybotics_anymal_api.Controllers;

		[ApiController]
		[Route("anymal/COMMAND_NAME_CAMEL_CASE")]
		public class {{COMMAND_NAME}}Controller(ICommandBus commandBus) : BaseAnymalCommandController(commandBus)
		{
			[HttpPost]
			[Deny("guest")]
			public async Task<IActionResult> {{COMMAND_NAME}}([FromBody] string id)
			{
				var validationResult = ValidateId(id);
				if (validationResult != null)
				{
					return validationResult;
				}

				var result = await commandBus.SendAsync(new {{COMMAND_NAME}}Command(id, UserUid));
				return Ok(result);
			}
		}
		
	OK AnymalService.cs
	
		Instead of modifying the AnymalService.cs I'd like to create a separate file 
		
		AnymalService.{{COMMAND_NAME}}.cs
	
			using AnymalGrpc;

			namespace anybotics_anymal_api.Services;

			public partial class AnymalService
			{
				public Task<UpdateResponse> {{COMMAND_NAME}}Async(string id)
					=> PerformAgentActionAsync(id, async agentClient =>
					{
						if (agentClient.Agent.Status == AnymalGrpc.Status.Offline)
						{
							throw new InvalidOperationException("Agent is Offline. {{COMMAND_NAME}} requests are ignored.");
						}

						var @event = new Command { Id = id, CommandId = "{{COMMAND_NAME}}" };
						await agentClient.CommandStream?.WriteAsync(@event);
					},
					$"Performing {{COMMAND_NAME}} agent {id}.", "Agent not found.");
			}

	OK agent.service.ts
	
34)	Introduce `move` (left, right, forward, backward) commands. They should update the agent location

35) Update generator script: --skip-proto to avoid adding message to proto file

36) Add UI for SetManualMode On/Off

37) I have an angular already written and now I need to integrate authentication using Firebase. I would like to be able to perform login, store the authentication token in local storage, make sure the token is included in every http request. When closing and reopening the browser (also when refreshing the page)  I want to make sure the user can still login if the token has not expired yet and automatically refresh it if needed.

37) I have a console application that talks via gRPC to an ASP.NET Web Api: 

using anybotics_anymal;
using AnymalGrpc;
using Grpc.Core;
using Grpc.Net.Client;

class Program
{
    static async Task Main(string[] args)
    {
        // Parse the agent name from the command-line arguments
        string agentName = args.Length > 0 ? args[0] : "Anymal";

        // Create a channel to the gRPC server
        using var channel = GrpcChannel.ForAddress("https://localhost:7272");
        var client = new AnymalService.AnymalServiceClient(channel);

        var agent = new Agent
        {
            Id = Guid.NewGuid().ToString(),
            Name = agentName,
            BatteryLevel = 100,
            Status = AnymalGrpc.Status.Active
        };

        try
        {
            // Register the agent
            await RegisterAgentAsync(client, agent);

            // Start monitoring events
            _ = MonitorCommandsAsync(client, agent);

            // Start battery decrease loop
            await BatteryDecreaseLoopAsync(client, agent);
        }
        catch (RpcException ex) when (ex.StatusCode == StatusCode.Unavailable)
        {
            Console.WriteLine($"Error: Server is unavailable.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Unexpected error: {ex.Message}");
        }
        finally
        {
            await channel.ShutdownAsync();
        }
    }

    static async Task RegisterAgentAsync(AnymalService.AnymalServiceClient client, Agent agent)
    {
        var registrationResponse = await client.RegisterAgentAsync(agent);
        Console.WriteLine($"Registration: {registrationResponse.Message} (ID: {agent.Id})");
    }

    static async Task MonitorCommandsAsync(AnymalService.AnymalServiceClient client, Agent agent)
    {
        var commandProcessors = CommandProcessorDiscovery.DiscoverCommandProcessors();

        using var call = client.StreamCommands(new CommandListener { Id = agent.Id });

        await foreach (var response in call.ResponseStream.ReadAllAsync())
        {
            if (response.Id == agent.Id && commandProcessors.TryGetValue(response.CommandId, out var processor))
            {
                if (processor.ConditionCheck(agent))
                {
                    processor.PerformCommand(agent, response);
                }
            }
        }
    }

    static async Task BatteryDecreaseLoopAsync(AnymalService.AnymalServiceClient client, Agent agent)
    {
        while (agent.BatteryLevel > 0)
        {
            await Task.Delay(10 * 1000); // 10 seconds delay

            if (agent.Status == AnymalGrpc.Status.Active)
            {
                agent.BatteryLevel--;

                var updateResponse = await client.UpdateBatteryAsync(new BatteryUpdate
                {
                    Id = agent.Id,
                    BatteryLevel = agent.BatteryLevel
                });

                Console.WriteLine($"Battery Update: {updateResponse.Message}");
            }
        }

        await NotifyBatteryDepletionAsync(client, agent);
    }

    static async Task NotifyBatteryDepletionAsync(AnymalService.AnymalServiceClient client, Agent agent)
    {
        // Final battery update when battery reaches 0
        var finalUpdateResponse = await client.UpdateBatteryAsync(new BatteryUpdate
        {
            Id = agent.Id,
            BatteryLevel = agent.BatteryLevel
        });

        Console.WriteLine($"Final Battery Update: {finalUpdateResponse.Message}");

        // Update status to Unavailable and notify the server
        agent.Status = AnymalGrpc.Status.Unavailable;

        var statusUpdateResponse = await client.UpdateStatusAsync(new StatusUpdate
        {
            Id = agent.Id,
            Status = agent.Status
        });

        Console.WriteLine($"Status Update: {statusUpdateResponse.Message}");
    }
}

This the gRPC proto file:

syntax = "proto3";

import "google/protobuf/any.proto";

option csharp_namespace = "AnymalGrpc";

service AnymalService {
  rpc RegisterAgent (Agent) returns (RegistrationResponse);
  
  rpc UpdateBattery (BatteryUpdate) returns (UpdateResponse);
  rpc UpdateStatus (StatusUpdate) returns (UpdateResponse);

  // Server-side streaming RPCs for the API to notify commands to ANYmal(s)
  rpc StreamCommands(CommandListener) returns (stream Command);
}

message Agent {
  string id = 1;
  string name = 2;
  int32 batteryLevel = 3;
  Status status = 4;
  bool manualMode = 5;
  Location location = 6;
}

message BatteryUpdate {
  string id = 1;
  int32 batteryLevel = 2;
}

message StatusUpdate {
  string id = 1;
  Status status = 2;
}

enum Status {
  Unavailable = 0;
  Active = 1;
  Offline = 2;
}

message Location {
  int32 X = 1;
  int32 Y = 2;
  int32 Z = 3;
}

message RegistrationResponse {
  bool success = 1;
  string message = 2;
}

message CommandListener {
  string id = 1;
}

message UpdateResponse {
  bool success = 1;
  string message = 2;
}

message Command {
  string id = 1;
  string commandId = 2;
  google.protobuf.Any payload = 3;
}

// add all command payload message here
message SetManualModeRequest {
  bool manualMode = 1;
}

I now want to be able to notify my API about hardware failures. I need the console app so genearate every “x” amount of time the agent an equipment failures
and let the API know. Here you can find all info about hardware items. Please make sure that you randomly pick up an hardware item and a status (Running, Failed, Anomaly_detected).

using AnymalGrpc;

namespace anybotics_anymal_api.Models;

public class AgentDetailsDto
{
    public required string Id { get; set; }
    public required string Name { get; set; }
    public int BatteryLevel { get; set; }
    public Status Status { get; set; }
    public required GeneralInfo General { get; set; }
    public required HardwareInfo Hardware { get; set; }
    public required List<string> RecentImages { get; set; }
    public required List<CommandHistoryItem> CommandHistory { get; set; }
    public required List<StatusHistoryItem> StatusHistory { get; set; }
}

public class GeneralInfo
{
    public required string CurrentCommand { get; set; }
    public required string Model { get; set; }
    public required string FirmwareVersion { get; set; }
    public DateTime FirmwareLastUpdated { get; set; }
    public bool ManualModeOn { get; set; }
    public required Location Location { get; set; }
    public required string TrekkerVersion { get; set; }
    public DateTime TrekkerLastUpdated { get; set; }
}

public class Location
{
    public double X { get; set; }
    public double Y { get; set; }
    public double Z { get; set; }
}

public class HardwareInfo
{
    public required string TemperatureSensor { get; set; }
    public required string PressureSensor { get; set; }
    public required string Leg1Status { get; set; }
    public required string Leg2Status { get; set; }
    public required string Leg3Status { get; set; }
    public required string Leg4Status { get; set; }
    public required string Gps { get; set; }
    public required string Engine { get; set; }
    public required string Battery { get; set; }
    public required string LidarScanner { get; set; }
    public required string Wifi { get; set; }
    public required string Lte { get; set; }
    public required string Cpu1 { get; set; }
    public required string Cpu2 { get; set; }
    public required List<string> DepthCameras { get; set; }
    public required List<string> OpticalCameras { get; set; }
    public required string ThermalCamera { get; set; }
    public required string PanTiltUnit { get; set; }
    public required string Spotlight { get; set; }
    public required string UltrasonicMicrophone { get; set; }
}

public class CommandHistoryItem
{
    public string InitiatedBy { get; set; }
    public DateTime Timestamp { get; set; }
    public string Description { get; set; }
}

public class StatusHistoryItem
{
    public DateTime Timestamp { get; set; }
    public Status Status { get; set; }
}

I also need to have a separate update send by the console app about inspection events in the following way. Please a separate gPRC channel

- Every “y” amount of time the agent identifies a thermal anomaly (room, equipment_id).
- Every “z” amount of time the agent identifies an acoustic anomaly (room, equipment_id).
- Every “k” amount of time the agent identifies gas/combustible (room, equipment_id).

Everytime an hardware failure or an event happen I need the API to send a signalR update to an angular front-end application. I do not need to setup the angular application. When the update reaches the front-end I want an angular material notification to be shown.

38) I want to create an admin module in an angular app that is lazy loaded. Only admin user should be able to the page and able to access it. From the admin page I need to be able to list all the users, 

39) Babylon.js (manual drive mode)
		OK render robot in 2d/3d world and then show the agent in the details view
		
I'd like to display a red battery shape next to the agent when the battery is almost depleted. Please just highlight the changes instead of generating the whole code again

40) Mission (collection of commands), store per user basis on firestore

	I have a solution consisting of an angular application using angular material framework and a web api made with ASP.Net Core.
	I also have a console application to simulate an agent.
	The agent talks with the web api via gRPC and exchanges events and commands. Examples of commands are Left, Right, Forward, 
	Each command is invoked from the angular application by using a corresponding POST method on a controller.

	Commands should be retrieved via an api endpoint using reflection to find classes implementing the interface ICommand (this 
	endpoint must also be created).

	Now I would like to introduce the concept of missions. A mission is a list of commands that need to be executed one after another
	sequentially. For instance I'd like to define 

	Mission 'GotoRoomA' as Left, Right, Forward, Forward, Left, Backward

	I would like to extend my front-end application by adding a separate component that lists all the available missions 
	and create one ones.

	I should be able to create a new mission by selecting the mission name and by picking up existing commands from a drop down. Once selected the command is shown in the UI so that I can remove it. 
	Once I selected all the desired commands I can save the mission by clicking on a button.

	I should also be able to see which missions are available at the top of the component

	I need both GET and POST endpoint to manage missions to be exposes by MissionsController. This controller should use the repository
	pattern to manage missions. I need to store the mission in a Firestore collection called "missions".

	Once all this is done I need to be able to execute a mission by extending the AnymalController. The controller should use
	the repository to retrieve the mission and do something like: 

	[HttpPost]
	[Deny("guest")]
	public async Task<IActionResult> Shutdown([FromBody] string id)
	{
		var validationResult = ValidateId(id);
		if (validationResult != null)
		{
			return validationResult;
		}

		var result = await commandBus.SendAsync(new ShutdownCommand(id, UserUid));
		return Ok(result);
	}

	The same UI component should allow to trigger the execution of a mission.

	Please remember to generate the UI using angular material components. Also make sure the endpoint to execute mission
	uses the command bus iterating on each command.
	
Mission "InspectRoomA" // during DEMO

Story book: requires additional study!


TODO
====
Wednesday
	move project to Nx
		32) introduce "admin library"?
		33) story book need some storybooks
		34) e2e tests using Cypress
			need a few e2e tests

	Improved front-end unit tests and add back-end unit tests
		Updated Linkedin profile
		verify profile
		updated profile summary
		summary for genesis/sea-maritech-clarksons
		prepared application for anybotics
		tool for recording video (Windows Game Bar + Clipchamp)	

Thursday
	1) DONE update linkedin experiences and summary (OK)
	2) DONE update headline: Senior Full Stack Engineer | Technology Leadership
	3) DONE update CV resume io
	
		maciej.maciaszek@clarksons.com
		ahsan.mumtaz@clarksons.com
		tanush.shukla@clarksons.com	
	
	4) DONE documenti laurea
	5) DONE missions, need a way to quick reach to the missions tab
	
	5) prepare script for video 
	
		BEAR IN MIND that Windows GAME cannot record multiple windows! So I can only show one window at at time.
		Do NOT context-switch!!!
	
		DEMO
			Hi and welcome to this demo! Throughout the course of this video I'll show you my take on the 
			Anybotics Platform.

			The Anybotics Workforce Dashboard acts as a hub gathering information about Anymal Agents.
			
			[So far we do not have any agent running yet, so let's start one!]
			[Alternatively, start with 6 agents already]
			
			Agents are simulated via a console application that communicates with the ASP.NET Core API via gRPC providing status updates while listening for commands to be performed.
			
			The full anymal hardware is simulated and events - like hardware failure and anomalies - are randomly generated every now and then. Let's not turn of the notifications for now. 
			
			Communication between the front-end and the API is done via signalR to ensure real-time updates.
			The app has been built using Angular and the Angular Material library.
			
			Let's now focus on each agent card. 
			
			As we can see, each agent has a name, an Id, and we can monitor the battery level and status, 
			which right now is "Active" as everything is working as expected!  
			
			In addition we have a Details/Commands/Missions
			
			From the details screen, describe each section, 
				I tried to accurately reproduce as much as possible from the information gathered from your web site.
				Hardware status, show same failures. etc.
				
				Recently acquired images, full audit list of commands, and status updates
				
			[Live feed for last.]
				DEMO Shutdown / Wakeup commands, Recharge
				Move commands but bear in mind that I cannot record 2 windows simultaneously
			
			From the mission screen
			
			Missions are essentially a shortcut to execute multiple commands at once. [Create a mission and save it]
			
			Run "inspect_room_A"
				
			Thanks for watching! I hope you like it!
					
			
	
	GOAL By the end of the day I should have a rough-cut of the video to be shot the following day and updated all online  links
	

Friday	
	Improve internal documentation and create project level documentation
	
	publish project (remove chatgpt stuff..)	
		add improvements documentation
	

IMPROVEMENTS 
	37) Fleet (group agents)

	30) SetManualMode should support bool payload | UI should be autogenerate based on back-end definition

	27) NgRx, convert shutdown, recharge, wake up actions

	31) Add Angular signals

	32) Download logs, images as bulk or single images, fullscreen images
		
	35) [Authorize] to protect controllers

	39) admin module: create new ones and change their roles. I am using Firebase to store user credentials and 
the user roles are kept into a firestore collection called "userRoles". I do not need details on how to setup firebase please.

	Refactoring: https://chatgpt.com/c/cc898959-ceb6-46a5-a778-350c3b90bef8

BUGS
	28) Cleanup signalR server side subscriptions
	
	After "Shutdown" command any other command is executed by the agent BUT not logged in the console
	